<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require_once ("Api_Controller.php"); 

class Auth extends Api_Controller
{
    public function __construct()
    {
        parent::__construct();
        // $this->load->model('Login_model');
    }

    public function login()
    {   
        $dataPost = $this->input->post();

        $this->lang->load('login', $this->LANGUAGE);

        if($this->validate_login()){
            $this->load->model('Login_model');

            $user = $this->Login_model->apiLogin($dataPost['username'], $dataPost['password']); 


            if ( !empty($user) ) {
                if ( element( 'fcm_token', $dataPost) ) {
                    $this->Login_model->insertRegistrationId($dataPost) ;
                    $this->Login_model->updateDeviceUserId($dataPost, $user['user_id']) ;
                }
                $tokenData = array();
                $tokenData['user_id'] = $user['user_id'];
                
                
                unset($user['user_id']); 
                unset($user['password']); 


                if($user['user_photo'])
                {
                  
                    
                    $user['user_photo'] = $user['user_photo'] == 'nophoto.png' ? null : assets_url('images/profile/') . $user['user_photo'];


                }
                else
                {
                    $user['user_photo']=null;
                }


                $response['success'] = TRUE;
                $response['msg'] = lang('login_success'); 

                $user['token'] = Authorization::generateToken($tokenData);
                // $delete = $this->cart->destroy();
                $response['data'] = $user;
                $this->output
                ->set_status_header(200)
                ->set_content_type('application/json', 'utf-8')
                ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
                ->_display();
                exit(); 
            }

            $response['success'] = false;
            $response['msg'] = lang('invalid_user_name_or_password');
            $response['error_msgs'] = ['Invalid Credentials'=>'Invalid Username or Password'];

            $this->output
            ->set_status_header(200)
            ->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
            ->_display();
            exit(); 

        }elseif($error_array = $this->form_validation->error_array()){ 

            $response['success']= false;
            $response['msg'] = join(", ",$error_array);

            $response['error_msgs'] = $error_array;

            $this->output
            ->set_status_header(200)
            ->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
            ->_display();
            exit(); 
        }

        $response['success'] = false; 
        $response['msg'] = 'Unauthorized';

        $this->output
        ->set_status_header(200)
        ->set_content_type('application/json', 'utf-8')
        ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
        ->_display();
        exit();
    }

    function validate_login() 
    {
        $password_length = $this->software->getSettingValueByKey('password_min_len');
        $this->form_validation->set_rules('username',  lang('username') , 'trim|required');
        $this->form_validation->set_rules('password', lang('password')  , 'trim|required|strip_tags|min_length['. $password_length .']');

        $val_res = $this->form_validation->run();
        return $val_res;
    }



    function validate_profile_update() 
    {  
        $this->form_validation->set_rules( 'email', lang('email'), 'trim|required|valid_email|strip_tags' ); 
        $this->form_validation->set_rules( 'first_name', lang('first_name'), 'trim|required|strip_tags' ); 
        $this->form_validation->set_rules( 'second_name', lang('second_name'), 'trim|required|strip_tags' ); 
        $this->form_validation->set_rules( 'address', lang('address'), 'trim|required|strip_tags' ); 
        $this->form_validation->set_rules( 'secure_pin', lang('secure_pin'), 'trim|required|strip_tags|numeric' ); 


        $result =  $this->form_validation->run();

        return $result;
    }

}
