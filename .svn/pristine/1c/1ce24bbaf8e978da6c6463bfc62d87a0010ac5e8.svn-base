<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require_once ("Api_Controller.php");
class User extends Api_Controller {

	function __construct() {
		parent::__construct();
		$this->load->model('Member_model');
		$this->load->model('Login_model');
		$this->load->model('Settings_model');
		$this->load->model('Inventory_model');
		$this->load->model('Tools_model');
		$this->load->model('Signup_model');
		$this->load->model('Dashboard_model');
		$this->load->model('Calculation_model');
	}  
	function getPackages() {
		try
		{
			$post_arr=$this->input->post();
			$response['packages'] = $this->Base_model->getAllPackagesAPI($post_arr); 
			$response['success'] = true;
			$this->output
			->set_status_header(200)
			->set_content_type('application/json', 'utf-8')
			->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
			->_display();
			exit();
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		}
	}



	public function Upgrade()
	{
		try{
			$token = $this->check_header(); 
			if($this->input->post())
			{
				$post_arr=$this->input->post();
				$this->load->model('Member_model');
				if ($this->validate_upgrade()) {
					$register = $this->input->post(); 
					$register['package']=$this->Base_model->encrypt_decrypt('decrypt', $register['package_id']);
					$package_amount = $this->Base_model->getPackageAmountbyId($register['package']);
					if(!$package_amount){
						$response['msg'] ='Invalid Package';
						$response['success'] = False;
						$this->output
						->set_status_header(200)
						->set_content_type('application/json', 'utf-8')
						->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
						->_display();
						exit(); 
					}
					$current_package=$this->Base_model->getUserInfoField('package_id',$token->user_id);
					$next_package=$this->Base_model->getNextPackage($current_package);
					if (!empty($next_package) && $next_package['package_id'] != $register['package']) 
					{
						$response['msg'] ='Invalid Package Your Next Package Is'.$next_package['name'];
						$response['success'] = False;
						$this->output
						->set_status_header(200)
						->set_content_type('application/json', 'utf-8')
						->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
						->_display();
						exit(); 
					}
					$this->Member_model->begin();
					$this->Member_model->insertUpgradeHistory($token->user_id,$current_package, $register['package'],'Upgrade',$package_amount,date('Y-m-d H:i:s'));
					$global_bonus=($package_amount*40/100)/20;
					$global_bonuss=$this->Calculation_model->InsertGlobalCommunityBonus($global_bonus,$register['package'],$token->user_id);
					$sponsor_id=$this->Base_model->getSponsorId($token->user_id);
					$level=$this->Calculation_model->insertLevelBonus( $sponsor_id, $package_amount, $token->user_id, date('Y-m-d H:i:s'));
					$this->Base_model->updateUserInfoField('package_id',$register['package'],$token->user_id);
					if($global_bonuss && $level){
						$this->Member_model->commit();
						$response['msg'] ='Upgraded successfully';
						$response['success'] = True;
						$this->output
						->set_status_header(200)
						->set_content_type('application/json', 'utf-8')
						->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
						->_display();
						exit(); 
					}else{
						$this->Member_model->rollback();
						$response['msg'] ='Error On Upgrading';
						$response['success'] = False;
						$this->output
						->set_status_header(200)
						->set_content_type('application/json', 'utf-8')
						->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
						->_display();
						exit(); 
					}
				}
				else
				{
					$response = [
						'success' => FALSE,
						'msg' => lang('Check_the_fields'),
					];
					$response['errors'] = $this->form_validation->error_array();
					$this->output
					->set_status_header(200)
					->set_content_type('application/json', 'utf-8')
					->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
					->_display();
					exit();
				}

			}
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}
	private function validate_upgrade() {
		$this->form_validation->set_rules('package_id', 'Package ID', 'required');
		$result =  $this->form_validation->run();
		return $result;
	}
}
