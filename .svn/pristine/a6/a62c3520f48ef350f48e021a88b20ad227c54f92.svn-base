<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require_once ("Api_Controller.php");
class Home extends Api_Controller {

	function __construct() {
		parent::__construct();  
	}


	public function signup()
	{
		try{

			$token = $this->check_header();
			$user_id = $token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);

			$default_sponsor = $user_name;

			if($this->input->post())
			{
				$post_arr=$this->input->post();
				$this->load->model('Signup_model');

				if(element( 'package',$post_arr))				
					$post_arr['package_name'] = $this->Base_model->getPackageNamebyId($post_arr['package']);
				if(element( 'country',$post_arr)){
					$this->load->model('Zone_model');
					$post_arr['country_name'] = $this->Zone_model->IdToCountryName($post_arr['country']);
				}		
				if ($this->validate_signup()) {
					$register = $this->input->post(); 
					if(!element( 'sponsor_id', $register))
					{
						$register['sponsor_id']=$default_sponsor; 
					}

					$register['joining_date'] = date('Y-m-d H:i:s');

					$sponsor_info = $this->Signup_model->getSponsorDetails($register['sponsor_name']);

					if(empty($sponsor_info)){

						$msg =lang('referral_is_not_exist');
						$response['success'] = False;
						$response['msg'] = $msg;
						return $this->setOutput($response);
						
					}

					$register['sponsor_info'] = $sponsor_info;
					$register['sponsor_id'] = $sponsor_info['user_id'];

					if ($register['package']) {
						$package_amount = $this->Base_model->getPackageAmountbyId($register['package']);
						$register['package_amount'] = $package_amount;
						$register['total_amount'] = value_by_key('signup_amount') + $package_amount;
					} else {
						$register['total_amount'] = value_by_key('signup_amount');
					}


					if($register['register'] == 'free_join')
					{
						

						$register['payment_type'] = 'free_join';
						$register['registration_type'] = 'free_join';

						$register_type = $register['register'];

						$this->Signup_model->begin();
						$response = $this->Signup_model->registrationProcess($register);

						if ($response['status']) { 

							$this->Signup_model->commit();

							$ecn_user_id = $this->Base_model->encrypt_decrypt( 'encrypt', $response['user_id'] );
							$password = $response['password'];
							$transaction_password = $response['transaction_password'];
							$user_name = $response['username'];

							$msg =  lang('signup_completed_successfully').','.lang('user_name').' :'. $user_name .',<br>'. lang('password').' :'. $password .','. lang('transaction_psw') .':'. $transaction_password ;
							$response['success'] = True;
							$response['msg'] = $msg;
							return $this->setOutput($response);
							

						} else {
							$this->Signup_model->rollback();
							$msg =lang('registration_failed');
							$response['success'] = False;
							$response['msg'] = $msg;
							return $this->setOutput($response);
							
						}
					}
					elseif($register['register'] == 'crypto')
					{


						$register['payment_type'] = 'BTC';
						$register['registration_type'] = 'payment_gateway';


						$register_type = $register['register'];

						$req_id = $this->Signup_model->insertCryptoRequest($register);
						$enc_id = $this->Base_model->encrypt_decrypt('encrypt',$req_id);

						$orderID_date = date('md-Hi').rand(0,10);


						$curl = curl_init();

						$this->load->config('ssl');

						curl_setopt_array($curl, array(
							CURLOPT_URL => 'https://coinremitter.com/api/v3/get-coin-rate',
							CURLOPT_RETURNTRANSFER => true,
							CURLOPT_ENCODING => '',
							CURLOPT_MAXREDIRS => 10,
							CURLOPT_TIMEOUT => 0,
							CURLOPT_FOLLOWLOCATION => true,
							CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
							CURLOPT_CUSTOMREQUEST => 'GET',
							CURLOPT_HTTPHEADER => array(
								'Accept: application/json',
							),
						));

						$currency_rate = curl_exec($curl);

						curl_close($curl);

						$currency_rate = json_decode($currency_rate, true);

						if($currency_rate['flag'] == '1'){

							$conversion_rate = $currency_rate['data']['DOGE']['price']* 25;

							$options = [
								'api_key' => $this->config->item('api_key', 'coinremitter'),
								'password' => $this->config->item('password', 'coinremitter'),
								'amount' => $this->config->item('currency_code', 'coinremitter')=='TCN' ? 1 : $conversion_rate,
								'name' => $orderID_date,
								'currency' => 'USD',
								'expire_time' => 30, 
								'custom_data1' =>  'Matrix',
								/*'notify_url'    => base_url().'signup',*/
								'fail_url' =>  base_url().'signup/payment-failed/'.$enc_id,  
								'suceess_url' => base_url().'signup/payment-success/'.$enc_id,  
								'description' => 'Matrix Demo',


							];

							$curl = curl_init();

							curl_setopt_array($curl, array(
								CURLOPT_URL => 'https://coinremitter.com/api/v3/'.$this->config->item('currency_code', 'coinremitter').'/create-invoice',
								CURLOPT_RETURNTRANSFER => true,
								CURLOPT_ENCODING => '',
								CURLOPT_MAXREDIRS => 10,
								CURLOPT_TIMEOUT => 0,
								CURLOPT_FOLLOWLOCATION => true,
								CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
								CURLOPT_CUSTOMREQUEST => 'POST',
								CURLOPT_POSTFIELDS => $options,
								CURLOPT_HTTPHEADER => array( 
									'Accept: application/json',
								),
							));

							$res = curl_exec($curl);

							curl_close($curl);
							$res = json_decode($res, true);

						}
						if($res)
						{
							if($res['flag'] == 1){ 
								$this->Signup_model->updateBitcoinRequestStatus($req_id,$res['data']['invoice_id']);
								header('Location: '.$res['data']['url'], TRUE);
							}
							else{

								$msg =lang('retry');
								$response['success'] = False;
								$response['msg'] = $msg;
								return $this->setOutput($response);
								
							}
						}
					}
					elseif($register['register'] == 'cash_free')
					{
						$this->load->config('ssl');

						$register['payment_type'] = 'Cash Free';
						$register['registration_type'] = 'payment_gateway';
						$register_type = $register['register'];

						$orderID = date('md-Hi').rand(0,10);
						$customer_id=date('Y').rand(15,250000);
						$register['order_id']=$orderID;
						$req_id = $this->Signup_model->insertCryptoRequest($register,'cash_free');

						$enc_id = $this->Base_model->encrypt_decrypt('encrypt',$req_id);
						$register_amount=$register['total_amount'];
						$curl = curl_init();

						$request=[
							'order_id'=>$orderID,
							'order_amount'=>$register_amount,
							'order_currency'=>$this->config->item('currency_code', 'cash_free'),
							'customer_details'=>[
								'customer_id'=>$customer_id,
								'customer_email'=>$register['email'],
								'customer_phone'=>$register['mobile']

							],
							'order_meta'=>[
								'return_url'=>base_url().'signup/cashfree-response/{order_id}',
								'notify_url'=>base_url().'signup/cashfree-callback'
							]

						];

						$request1=json_encode($request);
						curl_setopt_array($curl, array(
							CURLOPT_URL => $this->config->item('url', 'cash_free'),
							CURLOPT_RETURNTRANSFER => true,
							CURLOPT_ENCODING => '',
							CURLOPT_MAXREDIRS => 10,
							CURLOPT_TIMEOUT => 0,
							CURLOPT_FOLLOWLOCATION => true,
							CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
							CURLOPT_CUSTOMREQUEST => 'POST',
							CURLOPT_POSTFIELDS =>$request1,
							CURLOPT_HTTPHEADER => array(
								'x-client-id:'.$this->config->item('appId', 'cash_free'),
								'x-client-secret:'.$this->config->item('secretKey', 'cash_free'),
								'x-api-version: 2022-01-01',
								'Content-Type: application/json'
							),
						));

						$response = curl_exec($curl);
						curl_close($curl);
						$json=json_decode($response,true);

						if($json)
						{

							if(element('order_status',$json))
							{
								if($json['order_status']=='ACTIVE'&&$json['payment_link']!='')
								{
									redirect($json['payment_link']);
								}

							}
							else
							{

								$msg =$json['message'];
								$response['success'] = False;
								$response['msg'] = $msg;
								return $this->setOutput($response);
							}

						}
						else{

							$msg =lang('invalid_payment_details');
							$response['success'] = False;
							$response['msg'] = $msg;
							return $this->setOutput($response);
							
						}

					}
					elseif($register['register'] == 'coin_base')
					{


						$register['register'] = 'coin_base'; 
						$this->config->load('ssl');
						$req_id = $this->Signup_model->insertCryptoRequest($register,'coin_base');
						$package_name=$this->Base_model->packageIdToPackageName($register['package']);
						$register_amount=$register['total_amount'];
						$curl = curl_init();
						$request=[

							"name"=>'Hi, '.$register['firstname'],
							"description"=> 'Purchase of pacakge '.$package_name. ' worth : '. cur_format($register_amount),
							"pricing_type"=> "fixed_price",
							"local_price"=> [ 
								"amount"=> $register['total_amount'],
								"currency"=> "USD"
							],
							"metadata"=>$register,
							"redirect_url"=> base_url()."signup/coin-base-payment-success",
							"cancel_url"=> base_url()."signup/coin-base-payment-failed"
						];

						curl_setopt_array($curl, array(
							CURLOPT_URL => 'https://api.commerce.coinbase.com/charges',
							CURLOPT_RETURNTRANSFER => true,
							CURLOPT_ENCODING => '',
							CURLOPT_MAXREDIRS => 10,
							CURLOPT_TIMEOUT => 0,
							CURLOPT_FOLLOWLOCATION => true,
							CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
							CURLOPT_CUSTOMREQUEST => 'POST',
							CURLOPT_POSTFIELDS =>json_encode($request),
							CURLOPT_HTTPHEADER => array(
								'X-CC-Api-Key: '.$this->config->item('api_key'),					
								'X-CC-Version: 2018-03-22',
								'Content-Type: application/json'
							),
						));

						$response = curl_exec($curl);

						$data=json_decode($response,true);
						if(element('data', $data))
						{
							$url = $data['data']['hosted_url'];
							$request['charge_id'] = $data['data']['code'];
							log_message( 'error', 'COINBASE :  ' . json_decode($request));
							$this->session->set_userdata('charge_id', $data['data']['code']);
							redirect($url);
						}else{

							$msg =lang('payment_gateway_not_responding');
							$response['success'] = False;
							$response['msg'] = $msg;
							return $this->setOutput($response);
							
						}
					}
					elseif($register['register'] == 'stripe')
					{

						$register['register'] = 'stripe'; 
						$this->config->load('ssl');
						$req_id = $this->Signup_model->insertCryptoRequest($register,'stripe');
						$package_name=$this->Base_model->packageIdToPackageName($register['package']);
						$register_amount=$register['total_amount'];
						$enc_id = $this->Base_model->encrypt_decrypt('encrypt',$req_id);

						ini_set('display_errors', 1);

						$stripe = array(
							"secret_key" => "sk_test_51L7dJ3SGsGyRwWY1I7X2vFHf5iA9DGWZG2Fx3foXBJabNtpp6PJ5bQ2ZCWhC73DaZY53S7bloTKPBHp1sypmVJbW00veArF4DH",
							"publishable_key" => "pk_test_51L7dJ3SGsGyRwWY1B4jXspDVrHIK8wv3CoGsGTj4CuoRWV8lD2b2hkfFfZpKJQJBl36UWztOuLREbk44i9Q8ehPE00G5XyUMuo"
						);
						require_once(FCPATH . "application/libraries/vendor/autoload.php" );
						\Stripe\Stripe::setApiKey($stripe['secret_key']);
						header('Content-Type: application/json');

						$checkout_session = \Stripe\Checkout\Session::create([
							'payment_method_types' => ['card'],
							'line_items' => [[
								'price_data' => [
									'currency' => 'inr',
									'unit_amount' => $register_amount*100,
									'product_data' => [
										'name' => $package_name,
										'images' => ["https://i.imgur.com/EHyR2nP.png"],
									],
								],
								'quantity' => 1,
							]],
							'mode' => 'payment',
							'success_url' => base_url() ."signup/stripe-payment-success/".$enc_id,
							'cancel_url' => base_url(). '/signup',
						]);


						if($checkout_session)
						{
							if($checkout_session->url)
							{
								redirect($checkout_session->url);
							}
						}

					}
				}
				else
				{
					$response['success'] = FALSE;
					$this->error_array['error_msgs'] = $this->form_validation->error_array();
					$response = $this->error_array;
					return $this->setOutput($response);
				}
			}

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}

	private function validate_signup() {

		$len_mob = value_by_key("phone_number_length");
		$this->form_validation->set_rules('sponsor_name', lang('sponsor_name'), 'required');
		$this->form_validation->set_rules('firstname', lang('firstname'), 'required');
		$this->form_validation->set_rules('lastname', lang('lastname'), 'required');
		$this->form_validation->set_rules('address', lang('address'), 'required');
		$this->form_validation->set_rules('country', lang('country'), 'required');
		$this->form_validation->set_rules('mobile', lang('mobile'), 'required|min_length['.$len_mob.']|max_length['.$len_mob.']|numeric');
		$this->form_validation->set_rules('email', lang('email'), 'required|valid_email|is_unique[user_info.email]');
		
		$result =  $this->form_validation->run();

		return $result;
	}


	public function forgot_password()
	{ 
		try
		{
			$this->load->model('Login_model');
			$this->lang->load('login', $this->LANGUAGE);
			$response['success'] = FALSE;

			if ($this->validate_forgot_password()) {
				$post_arr = $this->input->post();
				$user_name = $post_arr["user_name"];
				$user_id = $this->Base_model->getUserId($user_name);
				$email = $post_arr["email"];
				$site_details=$this->Base_model->getCompanyInformation();

				$select_arr=['first_name','second_name','email'];

				$user_details=$this->Base_model->getUserInfoField($select_arr,$user_id);

				$full_name = $user_details['first_name'] . ' ' . $user_details['second_name'];
				
				if($user_id)
				{
					$user_email = $user_details['email'];


					if ($user_email == $email) {   
						$keyword = $this->Login_model->getKeyWord($user_id);
						$this->load->model('Mail_model');
						$mail_arr = array(
							'user_id' => $user_id,
							'keyword' => $keyword,
							'email' =>  $user_email,
							'fullname'=>$full_name,						);
						$this->Mail_model->sendEmails('forgot_password', $mail_arr); 
						$msg = lang('please_check_mail_for_reset_password');
						$response['success'] = TRUE;
						$response['msg'] =  $msg;
						return $this->setOutput($response);
					} else {
						$msg = lang('failed_user_email_not_match');
						$response['success'] = FALSE;
						$response['msg'] =  $msg;
						return $this->setOutput($response);
					}
				}
			}else{

				$response['success'] = FALSE;
				$response['msg'] = lang('Invalid fields'); 

				$error =  $this->form_validation->error_array();

				$response['error_msgs'] = $error; 
				// $response['data'] = $data;

				return $this->setOutput($response);
			}
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}
	protected function validate_forgot_password() { 
		$this->form_validation->set_rules('user_name', lang('username'), 'trim|required|is_exist[user_info.user_name]');
		$this->form_validation->set_rules('email',lang('email_address'), 'required|is_exist[user_info.	email]');
		$result =  $this->form_validation->run();

		return $result;
	}
	public function my_profile()
	{
		try
		{
			$token = $this->check_header();
			$select_arr = ['first_name', 'user_photo', 'email', 'country', 'city', 'address', 'facebook', 'instagram', 'twitter' ,'mobile','state'];
			$data['user_details'] = $this->Base_model->getUserDetails($token->user_id, $select_arr );


			$response['success'] = TRUE;
			$response['data'] =  $data;
			$response['data']['user_details']['user_photo'] = assets_url('images/profile_pic/').$response['data']['user_details']['user_photo'];
			// $response['data']['bitcoin_update_status'] = $bitcoin_update_status;

			return $this->setOutput($response);
		}catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}
	public function dashboard()
	{
		try
		{

			$this->load->model( ['Dashboard_model', 'Member_model','Inventory_model','Settings_model'] ); 
			$token = $this->check_header();  

			$user_id = $token->user_id;
			
			$user_name = $this->Base_model->getUserName( $user_id);
			$data['referral_link']=base_url().'referral/'.$user_name;
			$data['total_refferal'] = $this->Base_model->getTotalUsers($user_id);
			$user_wallet = $this->Dashboard_model->getUserWalletDetails($user_id);
			$data['total_wallet']=$user_wallet['wallet'];


			$data['referral_bonus']=$user_wallet['referral_bonus'];
			$data['level_bonus']=$user_wallet['level_bonus'];
			$data['rank_bonus']=$user_wallet['rank_bonus'];

			
			$payout_release = $this->Dashboard_model->getUserPayoutAmount($user_id,'released');
			$payout_pending = $this->Dashboard_model->getUserPayoutAmount($user_id,'pending');
			$data['total']=$payout_release+$payout_pending;

			$data['released']=$payout_release;
			$data['pending']=$payout_pending;

			$months = $joinees = array(); 

			for ($n = 11; $n >= 0; $n--) {
				$month = date('m', strtotime(" - $n month"));
				$year = date('Y', strtotime(" - $n month"));


				$month_name = date('M', strtotime(" - $n month"));
				$month_year[$n]['month_name'] = $month_name;


				$joinees[] = count($this->Dashboard_model->getUserReferrals($user_id, $month, '', '', $year)); 
				$months[] = $month_name;  
			}


			$data['months'] = $months;
			$data['joinees'] = $joinees;
			if(!empty($user_wallet['wallet']))
			{
				$referral_per = round(($user_wallet['referral_bonus']/$user_wallet['wallet'])*100 ,2);
				$data['referral_per'] = $referral_per;
				$data['referral'] = cur_format($referral_per);

				$level_per =round(($user_wallet['level_bonus']/$user_wallet['wallet'])*100 ,2);
				$data['level_per'] =cur_format($level_per);
				$data['level_bar'] =$level_per;


				$withdrawal_per = round(($user_wallet['wallet_withdrawal']/$user_wallet['wallet'])*100,2);
				$data['withdrawal_per'] = cur_format($withdrawal_per);
				$data['withdrawal']=$withdrawal_per;

				$matrix_per = round(($user_wallet['matrix_bonus']/$user_wallet['wallet'])*100,2);
				$data['matrix_per'] = cur_format($matrix_per);
				$data['matrix']=$matrix_per;

				$rank_per = round(($user_wallet['rank_bonus']/$user_wallet['wallet'])*100,2);
				$data['rank_per'] = cur_format($rank_per);
				$data['rank']=$rank_per;


				$data['fund_transfer'] = round(($user_wallet['fund_transfer']/$user_wallet['wallet'])*100,2);
			}
			else
			{
				$data['referral_per'] = 0 ;
				$data['level_per']    =0 ;
				$data['withdrawal_per'] = 0;
			}

			$package=$this->Base_model->getUserPackageId($user_id);
			$this->load->model('Settings_model');
			$data['roi']=element('roi',$this->Settings_model->getPackageDetails($package));


			$recent_referrals = $this->Dashboard_model->getRecentReferrals($user_id);


			$this->load->model('Support_model');
			$data['ticket_count'] = $this->Support_model->getTicketCountByType($user_id);
			$resolved_id = $this->Support_model->getTicketStatusToid('Resolved');
			$data['resolved_count'] = $this->Support_model->getTicketCountByType($user_id, 'status_id', $resolved_id);

			$data['recent_referrals'] =  $recent_referrals;
			$data['top_recruiters']=$this->Dashboard_model->getCountRecruiters();

			$data['total_investment'] = $this->Dashboard_model->getTotalInvestAmount($user_id);

			$data['curent_rank'] = $this->Dashboard_model->getCurrentRank($user_id);
			
			$data['total_sales_pending'] = $this->Dashboard_model->getTotalSales($user_id,'Pending');
			$data['total_sales_confirmed'] = $this->Dashboard_model->getTotalSales($user_id,'Delivered');

			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);


		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}


	public function get_all_countries()
	{
		try
		{

			$this->load->model('Zone_model');
			$this->load->model('Member_model');

			$post_arr=$this->input->post();

			$countries = $this->Zone_model->getAllCountriesAuto();
			$states = $this->Member_model->getAllStates($post_arr);
			$response['success'] = TRUE;
			$response['countries'] =  $countries;
			$response['states'] =  $states;
			$this->output
			->set_status_header(200)
			->set_content_type('application/json', 'utf-8')
			->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
			->_display();
			exit();


		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}
	public function get_all_packages()
	{
		try
		{

			$this->load->model('Zone_model');

			$countries = $this->Zone_model->getAllPackagesAuto();
			$response['success'] = TRUE;
			$response['countries'] =  $countries;
			$this->output
			->set_status_header(200)
			->set_content_type('application/json', 'utf-8')
			->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
			->_display();
			exit();


		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}
	public  function check_sponsor_availability() { 
		try
		{
			$this->load->model('Signup_model');
			$username = $this->input->post('referral_name');
			// if ($username) {
			$user_available = $this->Signup_model->isUserAvailable($username);
			if ($user_available) { 
				$user_id=$this->Base_model->getUserId($username);
				$response['success']=TRUE;
				$data['user_available']='Sponsor validated ';
				$response['data']=$data;
				$this->output
				->set_status_header(200)
				->set_content_type('application/json', 'utf-8')
				->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES ))
				->_display();
				exit();  


			}else{
				$response['success']=false;
				$data['user_available']=' Invalid Referral ID';
				$response['data']=$data;
				$this->output
				->set_status_header(200)
				->set_content_type('application/json', 'utf-8')
				->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES ))
				->_display();
				exit();	
			}

			// } 
		}catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}

}
