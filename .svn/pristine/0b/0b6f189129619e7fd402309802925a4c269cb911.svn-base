<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Support extends Base_Controller {

	function __construct() {
		parent::__construct(); 
	}

	function overview()
	{
		$user_id = log_user_id();
		$data['title'] = lang('text_support_system');
		
		$graph_values = $this->Support_model->getGraphValues($user_id);

		$data['total_tickets'] = json_encode($graph_values['total_tickets']);

		$data['open_tickets'] = json_encode($graph_values['open_tickets']);

		$data['resolved_tickets'] = json_encode($graph_values['resolved_tickets']);
		

		$open_ticket_diff = $graph_values['open_tickets'][0]['yAxis'] - $graph_values['open_tickets'][1]['yAxis'];

		$data['open_ticket_diff'] = $open_ticket_diff;
		
		$resolved_ticket_diff = $graph_values['resolved_tickets'][0]['yAxis'] - $graph_values['resolved_tickets'][1]['yAxis'];
		$data['resolved_ticket_diff'] =  $resolved_ticket_diff;


		$reopen_id = $this->Support_model->getTicketStatusToid('Re-open');
		$reopen_count = $this->Support_model->getTicketCountByType($user_id, 'status_id', $reopen_id);
		
		$data['reopen_count'] =  $reopen_count;
		$closed_id = $this->Support_model->getTicketStatusToid('Closed');
		$closed_count = $this->Support_model->getTicketCountByType($user_id, 'status_id', $closed_id);
		$data['closed_count'] = $closed_count;

		$emergency_id = $this->Support_model->getTicketPriorityToid('Emergency');
		$emergency_count = $this->Support_model->getTicketCountByType($user_id, 'priority_id', $emergency_id);
		$data['emergency_count'] = $emergency_count;

		$high_id = $this->Support_model->getTicketPriorityToid('High');
		$high_count = $this->Support_model->getTicketCountByType($user_id, 'priority_id', $high_id);
		$data['high_count'] = $high_count;

		$this->loadView($data);
	}

	function create()
	{

		if($this->input->post('create_ticket') && $this->validate_create()){

			$post_arr = $this->input->post();
			$post_arr = $this->security->xss_clean( $post_arr );
			$this->Support_model->begin(); 
			$post_arr['user_id'] = log_user_id();
			$post_arr['file_name'] = NULL;
			if($_FILES['userfile']['error']!=4)
			{
				$config['upload_path'] = './assets/uploads/efiles/';
				$config['allowed_types'] = 'gif|jpg|png|jpeg|gif';
				$config['max_size'] = '2000000';
				$config['remove_spaces'] = true;
				$config['overwrite'] = false;
				$config['encrypt_name'] = TRUE;

				$this->load->library('upload', $config);
				$msg = '';
				if (!$this->upload->do_upload()) {
					$msg = lang('image_not_selected');
					$error = $this->upload->display_errors();
					$this->redirect( $error, "support/create", false );
				} else {
					$image_arr = $this->upload->data();  
					$post_arr['file_name']=$image_arr['file_name'];
				}
			}
			$ticket_details = $this->Support_model->insertTicket($post_arr);

			if ($ticket_details['status']) {
				$this->Support_model->commit();
				$post_arr['ticket_id'] = $ticket_details['ticket_id'];
				$ticket_name = $ticket_details['ticket_name'];
				$data = serialize($post_arr);          
				$this->Base_model->insertIntoActivityHistory(log_user_id(), log_user_id(),'ticket_created', $data);            
				$msg = sprintf(lang('success_ticket_created'),  base_url().log_user_type().'/support/my_tickets', $ticket_name);
				$this->redirect($msg, 'support/my_tickets', TRUE);
			} else {
				$this->Support_model->rollback();
				$msg = lang('error_ticket_creation');
				$this->redirect($msg, 'support/my_tickets', FALSE);
			}
		}
		$data['title'] = lang('text_create');
		
		$priority_arr = $this->Support_model->getSupportSettings('priority');
		
		$data['priority_arr'] = $priority_arr;

		$topic_arr = $this->Support_model->getSupportSettings('topic');
		$data['topic_arr'] = $topic_arr;
		
		$this->loadView($data);
	}

	function validate_create() 
	{
		$this->form_validation->set_rules('priority', lang('text_priority'), 'trim|required|numeric|callback_check_priority');
		$this->form_validation->set_rules('topic', lang('text_topic'), 'trim|required|numeric|callback_check_topic');
		$this->form_validation->set_rules('subject', lang('text_subject'), 'trim|required|htmlentities');
		$this->form_validation->set_rules('message', lang('text_message'), 'trim|required|htmlentities');
		$result =  $this->form_validation->run(); 
		return $result;
	}

	function check_priority($priority_id) {
		if(!$this->Support_model->checkPriorityExist($priority_id))
		{
			$this->form_validation->set_message('check_priority', lang("error_priority_not_exist"));
			return FALSE;
		} 
		return TRUE;
	}

	function check_topic($topic_id) {
		if(!$this->Support_model->checkTopicExist($topic_id))
		{
			$this->form_validation->set_message('check_topic', lang("error_topic_not_exist"));
			return FALSE;
		} 
		return TRUE;
	}

	function my_tickets()
	{
		$data['title'] = lang('text_my_tickets');
		$status_search_arr = $priority_search_arr = $topic_search_arr = array();
		$searched_ticket_id = NULL;
		if($this->input->post('search')){

			$searched_ticket_id = $this->Support_model->ticketNameToId($this->input->post('ticket_name'));
			if(!$searched_ticket_id && $this->input->post('ticket_name')){
				$msg = lang('error_you_can\'t_access_this_ticket');
				$this->redirect($msg, 'support/my_tickets', FALSE);
			}

			$status_search_arr = $this->input->post('status_ids');
			$priority_search_arr = $this->input->post('priority_ids');
			$topic_search_arr = $this->input->post('topic_ids');
		}

		$ticket_arr = $this->Support_model->getAllTickets($searched_ticket_id, log_user_id(), $status_search_arr, $priority_search_arr, $topic_search_arr);
		$data['ticket_arr'] = $ticket_arr;
		// $status_arr = $this->Support_model->getSupportSettings('status',2);
		// $data['status_arr'] = $status_arr;
		$status_arr = $this->Support_model->getSupportSettings('status');

		$data['status_arr'] = $status_arr;
		$this->loadView($data);
	} 

	function ticket_details()
	{
		$enc_ticket_id = $this->input->get('ticket_id');
		$ticket_id = $this->Base_model->encrypt_decrypt( 'decrypt', $enc_ticket_id);
		$ticket_user_id = $this->Support_model->getTicketUserid($ticket_id);
		if((log_user_id() != $ticket_user_id && log_user_type() != 'admin') || !$ticket_id){
			$msg = lang('error_you_can\'t_access_this_ticket');
			$this->redirect($msg, 'support/my-tickets', FALSE);
		}

		
		$data['title'] = lang('label_ticket_details');

		$status_arr = $this->Support_model->getSupportSettings('status');

		$data['status_arr'] = $status_arr;
		$ticket_arr = $this->Support_model->getAllTickets($ticket_id);
		$data['ticket_arr'] = $ticket_arr[0];
		$data['ticket_id'] = $ticket_id;

		$this->loadView($data);
		
	}
	function changeStatus(){


		$post_arr = $this->input->post();

		$response = array('error' => FALSE);
		
		$ticket_user_id = $this->Support_model->getTicketUserid($post_arr['ticket_id']);
		if(log_user_id() != $ticket_user_id && log_user_type() != 'admin'){
			$response['error'] = TRUE;
			$response['message'] = lang('error_you_can\'t_access_this_ticket');
		}
		
		if($response['error'] == FALSE){
			$update_status = $this->Support_model->updateTicketsStatus($post_arr['ticket_id'], $post_arr['status']);
			
			if ($update_status) { 
				$data = serialize($post_arr);         
				$this->Base_model->insertIntoActivityHistory(log_user_id(), log_user_id(), 'change_ticket_status', $data);
				$msg = lang('success_ticket_status_changed');
				$this->set_session_flash_data($msg, TRUE);
			} else {     
				$msg = lang('error_ticket_status_changing');
				$this->set_session_flash_data($msg, FALSE);
			}
		}
		echo json_encode($response);

	}

	public function getTicketActivityRequest(){
		$response = array('error' => FALSE);
		$ticket_id = $this->input->post('ticket_id');
		if(!$this->Support_model->checkTicketExist($ticket_id)){
			$response['error'] = TRUE;
			$response['message'] = lang('error_you_can\'t_access_this_ticket');
		}

		$page = $this->input->post('page');
		if($response['error'] == FALSE){
			$ticket_actvy = $this->Support_model->getTicketActivity($ticket_id, $limit =5, $page);
			$content = '';
			foreach ($ticket_actvy as $key => $ticket) {
				$li_class = 'timeline-inverted';
				$li_class_color = 'success';

				if(log_user_id() == $ticket['user_id']){
					$li_class = '';
					$li_class_color = 'info';
				}
				$content .= 
				'<li class="'. $li_class .'">
				<div class="timeline-badge '. $li_class_color .'">
				<i class="material-icons">history</i>
				</div>
				<div class="timeline-panel">
				<div class="timeline-heading">
				<span class="label label-'. $li_class_color .'">'. $ticket["replied_user"] .'</span>
				</div>
				<div class="timeline-body">
				<p>'. $ticket["message"] .'.</p>
				</div>
				<h6>
				<i class="ti-time"></i>'. date('M d, Y h:i  A' , strtotime($ticket["date"])) .'
				</h6>
				</div>			
				</li>';
			}
			$response['message'] = $content;
		}
		echo json_encode($response);
	}

	function replyTicket()
	{
		$response = array('error' => FALSE);
		if($this->input->post('ticket_id')){

			if($this->validate_reply_ticket()){

				$post_arr = $this->input->post(); 
				$post_arr['user_id'] = log_user_id();
				$post_arr['date'] = date('Y-m-d H:i:s');

				$ticket_user_id = $this->Support_model->getTicketUserid($post_arr['ticket_id']);
				if(log_user_id() != $ticket_user_id && log_user_type() != 'admin'){
					$response['error'] = TRUE;
					$response['message'] = lang('error_you_can\'t_access_this_ticket');
				}
				if($response['error'] == FALSE){
					$this->Support_model->begin();
					$insert_ticket_activity = $this->Support_model->updateTicketActivities($post_arr);

					if ($insert_ticket_activity) {
						$this->Support_model->commit();


						$this->load->model('Mail_model');
						$ticket_name = $this->Support_model->ticketIdToName($post_arr['ticket_id']);  
						$ticket_user_type = $this->Base_model->getLoginInfoField('user_type',$ticket_user_id);  
						$mail_subject = 'Recieved the reply to your ticket';
						$mail_message = 'You recieved the reply to your ticket id <a href="'. base_url().$ticket_user_type .'/support/ticket_details?ticket_id='. $post_arr['ticket_id'] .'" target="_blank"> #'. $ticket_name .' </a>';
						$send_mail = $this->Mail_model->sendMessage($ticket_user_id, $mail_subject, $mail_message, $post_arr['date'], log_user_id(), 'message_to_single_user');  


						$data = serialize($post_arr);        
						$this->Base_model->insertIntoActivityHistory(log_user_id(), log_user_id(),'replied_to_ticket', $data);

						$response['user_name'] = log_user_name();
						$response['message'] = lang('success_ticket_replied');
					} else {
						$this->Support_model->rollback();           
						$response['message'] = lang('error_ticket_replying');
					}
				}

			}else{
				$response = $this->form_validation->error_array();	
				$response['error'] = TRUE;
			}
		}
		echo json_encode($response);
	}

	function validate_reply_ticket() 
	{
		$this->form_validation->set_rules('message', lang('text_message'), 'trim|required|htmlentities');
		$this->form_validation->set_rules('ticket_id', lang('text_ticket_id'), 'trim|required|numeric');
		$result =  $this->form_validation->run(); 
		return $result;
	}

	function changeTicketStatus() 
	{
		$post_arr = $this->input->post();
		$response = array('error' => FALSE);
		foreach ($post_arr['ticket_ids'] as $key => $ticket_id) {
			$ticket_user_id = $this->Support_model->getTicketUserid($ticket_id);
			if(log_user_id() != $ticket_user_id && log_user_type() != 'admin'){
				$response['error'] = TRUE;
				$response['message'] = lang('error_you_can\'t_access_this_ticket');
			}
		}
		if($response['error'] == FALSE){
			$update_status = $this->Support_model->updateTicketStatus($post_arr['ticket_ids'], $post_arr['status']);

			if ($update_status) { 
				$data = serialize($post_arr);         
				$this->Base_model->insertIntoActivityHistory(log_user_id(), log_user_id(), 'change_ticket_status', $data);
				$msg = lang('success_ticket_status_changed');
				$this->set_session_flash_data($msg, TRUE);
			} else {     
				$msg = lang('error_ticket_status_changing');
				$this->set_session_flash_data($msg, FALSE);
			}
		}
		echo json_encode($response);
	}

}