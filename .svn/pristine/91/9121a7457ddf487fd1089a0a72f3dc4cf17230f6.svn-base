<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Login extends Base_Controller 
{

	public function index()
	{ 

		$check=[];
		$id = $this->input->get('id');

        $token = $this->input->get('token');
        if($token)
        {
            $this->load->helper('authorization');
            $valid_token = Authorization::validateToken($token); 
            if($valid_token)
            {
                $login_result = [json_decode(json_encode($this->Base_model->getUserDetails($valid_token->user_id, ['user_id','user_name','user_type','default_lang'])))];
                $this->Login_model->setUserSessionDatas($login_result);
                $this->Base_model->insertIntoActivityHistory($valid_token->user_id, $valid_token->user_id, 'Successfull login');
                $this->redirect("", "dashboard", FALSE);
            }
            else {
                $this->redirect("", "login/?token=".$token, FALSE);
            }
        }
        if($id)
        {

           $extra = base_url()."signup/index/$id";
           header("Location: $extra");
           exit;
       }
       if(isset($_GET['user_name']) && isset($_GET['password'])){
           $user=$_GET['user_name'];
           $password=$_GET['password'];
           $check=$this->Login_model->login($user,$password);

           if($check){
            $data['user_name']=$user;
            $data['password']=$password;
        }
    }

    $social_login_count = 0;
    $google_login = value_by_key('google_login');
    $data['google_login'] = $google_login;
    if($google_login){
       $this->load->library("Google");
       $social_login_count++;
       if(isset($_GET['code'])){
        $this->google->getAuthenticate($_GET['code']);
        $_SESSION['token'] = $this->google->getAccessToken();
    }
    if (isset($_SESSION['token'])) {
        $this->google->setAccessToken($_SESSION['token']);
    }
    if(isset($_GET['code'])){
        $google_info = $this->google->getUserInfo();
        $login_result = $this->Login_model->loginByField($google_info["email"], "email",  'user_info');

        if ($login_result) 
        {
            $logged_data = $this->Login_model->setUserSessionDatas($login_result);
            $this->session->set_userdata('sign_social_login', 'gplus');
            $this->Base_model->insertIntoActivityHistory($logged_data["user_id"], $logged_data["user_id"], 'google_login', serialize($logged_data));
            $this->redirect("", "dashboard", FALSE);
        } else {
         $msg = str_replace("EMAILID", "<b>".$google_info["email"]."</b>", lang('error_email_id_not_existing_in_our_system'));
         $this->redirect($msg, 'login/index', FALSE);
     }
 }else{
    $authUrl = $this->google->createAuthUrl();
    $data['google_auth_link'] = filter_var($authUrl, FILTER_SANITIZE_URL);
}
}

		// $social_login_count = 0;
		// // $facebook_login = value_by_key('facebook_login');
		// $facebook_login = 1;
		// $data['facebook_login'] = $facebook_login;
		// if($facebook_login){
		// 	$social_login_count++;

		// 	$this->load->library("facebook");                
		// 	$login_result = FALSE;
		// 	$fb_info = array('email' => NULL);

		// 	if ($this->facebook->is_authenticated()) 
		// 	{
		// 		$fb_info = $this->facebook->request('get', '/me?fields=id,name,email');
		// 		$login_result = $this->Login_model->loginByField($fb_info["email"], "email", 'user_info');

		// 		if ($login_result)
		// 		{
		// 			$logged_data = $this->Login_model->setUserSessionDatas($login_result);
		// 			$this->session->set_userdata('sign_social_login', 'facebook');
		// 			$this->Base_model->insertIntoActivityHistory($logged_data["user_id"], $logged_data["user_id"], 'facebook_login', serialize($logged_data));
		// 			$this->redirect("", "dashboard", FALSE);
		// 		}else if($fb_info["email"] ){
		// 			$msg = str_replace("EMAILID", "<b>". $fb_info["email"] ."</b>", lang('error_email_id_not_existing_in_our_system'));
		// 			$this->set_session_flash_data($msg, FALSE);
		// 		}
		// 	}else{  

		// 		$data['facebook_login_link'] = $this->facebook->login_url();
		// 	}
		// }
$data['title'] = lang('button_login'); 
$this->handleUpdate();
$this->loadView($data);
}

public function setWebhook()
{
    $bot_token = '6068830078:AAECF0fxNQRE8hQbqCV2iZgV0A4lBdulOUg';
$webhook_url = 'https://our-demos.com/n/Matrix-demo/'; // Replace with your actual webhook URL

$url = "https://api.telegram.org/bot$bot_token/setWebhook?url=$webhook_url";

$ch = curl_init($url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($ch);

if ($response === false) {
    echo "Failed to set webhook.";
} else {
    echo "Webhook set successfully.";
}
}



public function handleUpdate() {
    $update = json_decode(file_get_contents("php://input"), TRUE);

    if(isset($update["message"])) {
        $this->handleMessage($update["message"]);
    } elseif (isset($update["callback_query"])) {
        $this->handleCallbackQuery($update["callback_query"]);
    }
}

private function handleMessage($message) {
    $chat_id = $message["chat"]["id"];
    $text = $message["text"];

    if ($text == "/start") {
        $this->sendMainMenu($chat_id);
    }
}

private function handleCallbackQuery($callback_query) {
    $chat_id = $callback_query["message"]["chat"]["id"];
    $data = $callback_query["data"];

    if ($data == "option1") {
        $this->sendSubMenu1($chat_id);
    } elseif ($data == "option2") {
        $this->sendSubMenu2($chat_id);
    } elseif ($data == "option3") {
        $this->sendSubMenu3($chat_id);
    }elseif ($data == "subOptionA") {
        $this->sendsubOptionA($chat_id);
    }elseif ($data == "subOptionB") {
        $this->sendsubOptionB($chat_id);
    }elseif ($data == "subOptionC") {
        $this->sendsubOptionC($chat_id);
    }elseif ($data == "subOptionD") {
        $this->sendsubOptionD($chat_id);
    }elseif ($data == "subOptionE") {
        $this->sendsubOptionE($chat_id);
    }elseif ($data == "subOptionF") {
        $this->sendsubOptionF($chat_id);
    }elseif ($data == "subOptionX") {
        $this->sendsubOptionX($chat_id);
    }elseif ($data == "subOptionY") {
        $this->sendsubOptionY($chat_id);
    }elseif ($data == "subOptionZ") {
        $this->sendsubOptionZ($chat_id);
    } elseif ($data == "backToMainMenu") {
        $this->sendMainMenu($chat_id);
    }elseif ($data == "backToMenuA") {
        $this->sendSubMenu1($chat_id);
    }elseif ($data == "backToMenuB") {
        $this->sendSubMenu1($chat_id);
    }elseif ($data == "backToMenuC") {
        $this->sendSubMenu1($chat_id);
    }elseif ($data == "backToMenuD") {
        $this->sendSubMenu2($chat_id);
    }elseif ($data == "backToMenuE") {
        $this->sendSubMenu2($chat_id);
    }elseif ($data == "backToMenuF") {
        $this->sendSubMenu2($chat_id);
    } elseif ($data == "backToMenuX") {
        $this->sendSubMenu3($chat_id);
    }elseif ($data == "backToMenuY") {
        $this->sendSubMenu3($chat_id);
    }elseif ($data == "backToMenuZ") {
        $this->sendSubMenu3($chat_id);
    } elseif ($data == "subOptionA1") {
        $this->sendTextMessage($chat_id, "You selected Button 111");
    }elseif ($data == "subOptionA2") {
        $this->sendTextMessage($chat_id, "You selected Button 112");
    }elseif ($data == "subOptionA3") {
        $this->sendTextMessage($chat_id, "You selected Button 113");
    } elseif ($data == "subOptionB1") {
        $this->sendTextMessage($chat_id, "You selected Button 121");
    }elseif ($data == "subOptionB2") {
        $this->sendTextMessage($chat_id, "You selected Button 122");
    }elseif ($data == "subOptionB3") {
        $this->sendTextMessage($chat_id, "You selected Button 123");
    } elseif ($data == "subOptionC1") {
        $this->sendTextMessage($chat_id, "You selected Button 131");
    }elseif ($data == "subOptionC2") {
        $this->sendTextMessage($chat_id, "You selected Button 132");
    }elseif ($data == "subOptionC3") {
        $this->sendTextMessage($chat_id, "You selected Button 133");
    } elseif ($data == "subOptionD1") {
        $this->sendTextMessage($chat_id, "You selected Button 211");
    } elseif ($data == "subOptionD2") {
        $this->sendTextMessage($chat_id, "You selected Button 212");
    } elseif ($data == "subOptionD3") {
        $this->sendTextMessage($chat_id, "You selected Button 213");
    } elseif ($data == "subOptionE1") {
        $this->sendTextMessage($chat_id, "You selected Button 221");
    }elseif ($data == "subOptionE2") {
        $this->sendTextMessage($chat_id, "You selected Button 222");
    }elseif ($data == "subOptionE3") {
        $this->sendTextMessage($chat_id, "You selected Button 223");
    } elseif ($data == "subOptionF1") {
        $this->sendTextMessage($chat_id, "You selected Button 231");
    } elseif ($data == "subOptionF2") {
        $this->sendTextMessage($chat_id, "You selected Button 232");
    } elseif ($data == "subOptionF3") {
        $this->sendTextMessage($chat_id, "You selected Button 233");
    } elseif ($data == "subOptionX1") {
        $this->sendTextMessage($chat_id, "You selected Button 311");
    }elseif ($data == "subOptionX2") {
        $this->sendTextMessage($chat_id, "You selected Button 312");
    }elseif ($data == "subOptionX3") {
        $this->sendTextMessage($chat_id, "You selected Button 313");
    } elseif ($data == "subOptionY1") {
        $this->sendTextMessage($chat_id, "You selected Button 321");
    }elseif ($data == "subOptionY2") {
        $this->sendTextMessage($chat_id, "You selected Button 322");
    }elseif ($data == "subOptionY3") {
        $this->sendTextMessage($chat_id, "You selected Button 323");
    } elseif ($data == "subOptionZ1") {
        $this->sendTextMessage($chat_id, "You selected Button 331");
    }elseif ($data == "subOptionZ2") {
        $this->sendTextMessage($chat_id, "You selected Button 332");
    }elseif ($data == "subOptionZ3") {
        $this->sendTextMessage($chat_id, "You selected Button 333");
    }
}

private function sendMainMenu($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 1", "callback_data" => "option1"],
                ["text" => "Button 2", "callback_data" => "option2"],
                ["text" => "Button 3", "callback_data" => "option3"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Main Menu:", $keyboard);
}

private function sendSubMenu1($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 11", "callback_data" => "subOptionA"],
                ["text" => "Button 12", "callback_data" => "subOptionB"],
                ["text" => "Button 13", "callback_data" => "subOptionC"]
            ],
            [
                ["text" => "Back to main menu", "callback_data" => "backToMainMenu"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Sub-Menu 1:", $keyboard);
} private function sendsubOptionA($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 111", "callback_data" => "subOptionA1"],
                ["text" => "Button 112", "callback_data" => "subOptionA2"],
                ["text" => "Button 113", "callback_data" => "subOptionA3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuA"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 11:", $keyboard);
} private function sendsubOptionB($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 121", "callback_data" => "subOptionB1"],
                ["text" => "Button 122", "callback_data" => "subOptionB2"],
                ["text" => "Button 123", "callback_data" => "subOptionB3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuB"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 12:", $keyboard);
} private function sendsubOptionC($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 131", "callback_data" => "subOptionC1"],
                ["text" => "Button 132", "callback_data" => "subOptionC2"],
                ["text" => "Button 133", "callback_data" => "subOptionC3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuC"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 13:", $keyboard);
} 

private function sendSubMenu2($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 21", "callback_data" => "subOptionD"],
                ["text" => "Button 22", "callback_data" => "subOptionE"],
                ["text" => "Button 23", "callback_data" => "subOptionF"]
            ],
            [
                ["text" => "Back to main menu", "callback_data" => "backToMainMenu"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Sub-Menu 2:", $keyboard);
}
private function sendsubOptionD($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 211", "callback_data" => "subOptionD1"],
                ["text" => "Button 212", "callback_data" => "subOptionD2"],
                ["text" => "Button 213", "callback_data" => "subOptionD3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuD"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 21:", $keyboard);
} private function sendsubOptionE($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 221", "callback_data" => "subOptionE1"],
                ["text" => "Button 222", "callback_data" => "subOptionE2"],
                ["text" => "Button 223", "callback_data" => "subOptionE3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuE"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 22:", $keyboard);
} private function sendsubOptionF($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 231", "callback_data" => "subOptionF1"],
                ["text" => "Button 232", "callback_data" => "subOptionF2"],
                ["text" => "Button 233", "callback_data" => "subOptionF3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuF"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 23:", $keyboard);
} 
private function sendSubMenu3($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 31", "callback_data" => "subOptionX"],
                ["text" => "Button 32", "callback_data" => "subOptionY"],
                ["text" => "Button 33", "callback_data" => "subOptionZ"]
            ],
            [
                ["text" => "Back to main menu", "callback_data" => "backToMainMenu"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Sub-Menu 3:", $keyboard);
}

private function sendsubOptionX($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 311", "callback_data" => "subOptionX1"],
                ["text" => "Button 312", "callback_data" => "subOptionX2"],
                ["text" => "Button 313", "callback_data" => "subOptionX3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuX"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 31:", $keyboard);
} private function sendsubOptionY($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 321", "callback_data" => "subOptionY1"],
                ["text" => "Button 322", "callback_data" => "subOptionY2"],
                ["text" => "Button 323", "callback_data" => "subOptionY3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuY"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 32:", $keyboard);
} private function sendsubOptionZ($chat_id) {
    $keyboard = [
        "inline_keyboard" => [
            [
                ["text" => "Button 331", "callback_data" => "subOptionZ1"],
                ["text" => "Button 332", "callback_data" => "subOptionZ2"],
                ["text" => "Button 333", "callback_data" => "subOptionZ3"]
            ],
            [
                ["text" => "Back to sub menu", "callback_data" => "backToMenuZ"]
            ]
        ]
    ];

    $this->sendInlineKeyboard($chat_id, "Button 33:", $keyboard);
} 

private function sendTextMessage($chat_id, $message) {
    $data = [
        "chat_id" => $chat_id,
        "text" => $message
    ];

    $this->sendTelegramRequest("sendMessage", $data);
}

private function sendInlineKeyboard($chat_id, $text, $keyboard) {
    $data = [
        "chat_id" => $chat_id,
        "text" => $text,
        "reply_markup" => json_encode($keyboard)
    ];

    $this->sendTelegramRequest("sendMessage", $data);
}

private function sendTelegramRequest($method, $data) {
    $telegram_api_url = "https://api.telegram.org/bot6068830078:AAECF0fxNQRE8hQbqCV2iZgV0A4lBdulOUg/";

    $ch = curl_init($telegram_api_url . $method);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $result = curl_exec($ch);
    curl_close($ch);
}



public function authenticate_login() 
{  


  if($this->input->is_ajax_request()){
   $this->form_validation->set_rules('user_name',  lang('username'), 'required');
   $this->form_validation->set_rules('pass', lang('password') , 'required');
   $val_res = $this->form_validation->run();
   if( $val_res ){
    $login_details = $this->input->post();  
    $user_name = $login_details['user_name'];
    $password = $login_details['pass'];
    $login_details = $this->security->xss_clean( $login_details );
    $login_result = $this->Login_model->login( $user_name, $password );

    if ($login_result) { 

     $log_user_type = $login_result[0]->user_type;

     if( ( $log_user_type != 'admin' ) && $this->MAINTENANCE_MODE == 1){

      $response['status'] = FALSE;
      $response['msg'] = $this->MAINTENANCE_TEXT;;
      $this->output
      ->set_status_header(200)
      ->set_content_type('application/json', 'utf-8')
      ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
      ->_display();
      exit();	 
  }

  $auth_tocken=md5($user_name.':'.$login_result[0]->password);

  $set_session=$this->session->set_userdata('auth_tocken',$auth_tocken);

  $this->Login_model->setUserSessionDatas($login_result);
  $this->session->set_userdata('site_social_login', NULL);

  if($this->session->userdata('site_logged_in')){

      $this->Base_model->insertIntoActivityHistory($login_result[0]->user_id, $login_result[0]->user_id, 'Successfull login');

      $response['status'] = TRUE;
      $response['location'] = base_url(). $log_user_type.'/dashboard';
      $this->output
      ->set_status_header(200)
      ->set_content_type('application/json', 'utf-8')
      ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
      ->_display();
      exit();	 
  } 

} else {

 $response['status'] = FALSE;
 $response['msg'] = '<p class="text-red">'.lang('invalid_user_name_or_password').'</p>';
 $this->output
 ->set_status_header(200)
 ->set_content_type('application/json', 'utf-8')
 ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
 ->_display();
 exit();	 
} 
}else{

    $response['status'] = FALSE;
    $response['msg'] = validation_errors();
    $this->output
    ->set_status_header(200)
    ->set_content_type('application/json', 'utf-8')
    ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
    ->_display();
    exit();	 
}

}

}


function logout() {

  $user_type = '';

  if ($this->hasSession()) { 
   $user_type=log_user_type();
}
foreach ($this->session->userdata as $key => $value) {
   if (strpos($key, 'site_') === 0) {
    $this->session->unset_userdata($key);
}
}
foreach ($this->session->userdata as $key => $value) {
   if (strpos($key, 'sign_') === 0) {
    $this->session->unset_userdata($key);
}
}
$this->session->sess_destroy();
$path = "login";          

$msg = lang('successfully_logged_out');
$this->redirect("$msg", $path, true);
}

public function session_out()
{
  if($this->hasSession()){
   $this->redirect("", "dashboard", FALSE);
}

if( ! element( 'site_timeout_sess' ,$this->session->userdata())){
   $this->redirect("", "dashboard", FALSE);
}

$timeout_sess =  $this->session->userdata( 'site_timeout_sess' );

$select_arr = ['user_photo'];
$user_details = $this->Base_model->getUserDetails( $timeout_sess[ 'user_id'], $select_arr );  

$data['title'] = lang('unlock'); 
$timeout_sess['user_photo'] = $user_details['user_photo'];
$data['timeout'] = $timeout_sess;

if( $this->input->post("login") && $this->validate_timeout( ) ){
   $this->redirect( '', "dashboard", true );
} 
if( $this->input->post( 'logout' )){
   $this->redirect( '', "logout", true );
} 
$this->loadView($data);
}

private function validate_timeout() 
{
  $this->form_validation->set_rules('password', lang("password") , 'required|strip_tags|callback_valid_password'); 
  $this->form_validation->set_message('valid_password', lang('incorrect_password_entered')); 
  $val_res = $this->form_validation->run(); 
  return $val_res;
}

public function valid_password() 
{
  $flag = false; 
  $password = $this->input->post('password');
  $login_details = $this->security->xss_clean( $password );

  $timeout_sess =  $this->session->userdata( 'site_timeout_sess' );
  $login_result = $this->Login_model->login( $timeout_sess['user_name'], $password );

  if ($login_result) {
   $this->Login_model->setUserSessionDatas($login_result);
   $this->session->set_userdata('site_social_login', NULL);
   $this->session->unset_userdata( 'site_timeout_sess' );
   $flag = true;
}
return $flag;
}

public function under_maintenance()
{
  $data['title'] = lang('under_maintenance');  
  $this->loadView($data);
}

public function forgot_success()
{
  $data['title'] = lang('forgot_success');  
  $this->loadView($data);
}

public function forgot_password()
{
  if($this->hasSession()){
   $this->redirect("", "dashboard", FALSE);
}

if ($this->input->post('forgot') && $this->verify_forgot_password()) {
   $post_arr = $this->input->post();
   $user_name = $post_arr["user_name"];
   $email = $post_arr["mail"];
   $user_id = $this->Base_model->getUserId($user_name);
   $user_email = $this->Base_model->getUserInfoField('email', $user_id);
   $full_name=$this->Base_model->getFullName($user_id);
   if ($user_email == $email) {   
    $keyword = $this->Login_model->getKeyWord($user_id);
    $mail_arr = array(
     'user_id' => $user_id,
     'keyword' => $keyword,
     'email' => $user_email,
     'fullname'=>$full_name,
 );
    $this->load->model('Mail_model');
    $this->Mail_model->sendEmails('forgot_password', $mail_arr); 

    $this->redirect( lang('please_check_mail_for_reset_password'), "login/reset-password/$keyword", TRUE);

} else { 
    $this->redirect( lang('failed_user_email_not_match'), 'forgot', FALSE);
}
} 
$data['title'] = lang('forgot');  
$this->loadView($data);
}

private function verify_forgot_password() { 
  $this->form_validation->set_rules('user_name', lang('username'), 'trim|required|is_exist[user_info.user_name]');
  $this->form_validation->set_rules('mail',lang('email_address'), 'required|is_exist[user_info.	email]');
  $result =  $this->form_validation->run();

  return $result;
}


function reset_password($keyword_encode ="") 
{
  if($this->hasSession()){
   $this->redirect("", "dashboard", FALSE);
}
if($keyword_encode == "" || !$this->Login_model->keywordAvailable($keyword_encode))
{
   $msg = lang('text_invalid_url');
   $this->redirect($msg, 'login.php', FALSE);
}

if ($this->input->post('reset_password') && $this->validate_reset_pass()) {
   $post_arr = $this->input->post();
   $keyword = $post_arr["keyword_encode"];
   $new_password = $post_arr["newpass"];
   $confirm_password = $post_arr["conpass"];
   if($keyword == "" || !$this->Login_model->keywordAvailable($keyword))
   {
    $msg = lang('text_invalid_url');
    $this->redirect($msg, 'login', FALSE);
}
$user_id = $this->Login_model->getUserIdFromKeyword($keyword);
$user_name=$this->Base_model->getUserName($user_id);
if($user_id == "")
{
    $msg = lang('text_invalid_url');
    $this->redirect($msg, 'login', FALSE);
}
else
{
    $this->load->model('Mail_model');
    $this->config->load('bcrypt');
    $this->load->library('bcrypt');
    $hashed_password = $this->bcrypt->hash_password($confirm_password);
    $update = $this->Login_model->updatePassword($hashed_password, $user_id);
    $res = $this->Login_model->updateKeywordStatus($user_id,$keyword);
    $res1 = $this->Login_model->sendPasswordMail($user_id,$new_password,$user_name);
    if ($update) {
     $this->Base_model->insertIntoActivityHistory($user_id, $user_id,'reset_password');              
     $msg = lang('text_password_updated_successfully');
     $this->redirect($msg, 'login.php', TRUE);
 } else {
     $msg = lang('text_error_on_password_updation');
     $this->redirect($msg, 'login.php', FALSE);
 }
}
}     

$data["keyword_encode"]= $keyword_encode;
$data["title"] = lang('button_reset');
$this->loadView($data);       
}

function validate_reset_pass() {

  $password_length = value_by_key('password_min_len');

  $this->form_validation->set_rules('newpass', lang('new_password'), 'required|min_length['. $password_length .']|alpha_numeric');
  $this->form_validation->set_rules('conpass', lang('confirm_password'), 'required|min_length['. $password_length .']|matches[newpass]');
  $result =  $this->form_validation->run();
  return $result;
}


function check_captcha() 
{ 
  $recaptcha = $this->input->post('g-recaptcha-response');
  $this->load->library('recaptcha');
  if (!empty($recaptcha)) 
  {
   $response = $this->recaptcha->verifyResponse($recaptcha);
   if (isset($response['success']) && $response['success'] === true){
    return true;
}
}
return false;
}

public function switch_lang($language_code = "") {
  if($this->hasSession()){

   $logged_in_arr = $this->session->userdata('site_logged_in');
   $lang_arr = array_column($this->LANG_ARR, 'language_id', 'code');
   $logged_in_arr['lang_id'] = ($language_code != "") ? $lang_arr[$language_code] : log_lang_id();
   $this->Login_model->updateUserLangId(log_user_id(), $logged_in_arr['lang_id']);
   $this->session->set_userdata('default_login_lang_id', $logged_in_arr['lang_id']);
   $this->session->set_userdata('site_logged_in', $logged_in_arr);

}else{

   $lang_arr = array_column($this->LOGIN_LANG_ARR, 'language_id', 'code');
   $lang_id = ($language_code != "") ? $lang_arr[$language_code] : $this->LOGIN_LANG_ID;

   $this->session->set_userdata('default_login_lang_id', $lang_id);
}

redirect($this->input->server('HTTP_REFERER'));

}
public function change_currency()
{
  if ($this->input->is_ajax_request()) {
   $post=$this->input->post();
   $currency_id=$post['currency_id'];
   $res=$this->session->set_userdata('currency_id', $currency_id);
   if ($res) {
    $response['status'] = TRUE;
    $response['msg'] = 'valid';
    $this->output
    ->set_status_header(200)
    ->set_content_type('application/json', 'utf-8')
    ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
    ->_display();
    exit();		
}
else{
    $response['status'] = FALSE;
    $response['msg'] = lang('invalid');
    $this->output
    ->set_status_header(200)
    ->set_content_type('application/json', 'utf-8')
    ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
    ->_display();
    exit();	
}

}
}

public function forgot_username()
{
  if($this->hasSession()){
   $this->redirect("", "dashboard", FALSE);
}

if ($this->input->post('forgot') && $this->verify_forgot_username()) {
   $post_arr = $this->input->post();
   $email = $post_arr["mail"];
   $user_name = $this->Base_model->getUserNameByEmail($email);
   $user_id = $this->Base_model->getUserId($user_name);
   $full_name = $this->Base_model->getFullName($user_id);
   $mail_arr = array(
    'user_id' => $user_id,
    'fullname' => $full_name,
    'email' => $email,
    'user_name'=>$user_name,
);
   $this->load->model('Mail_model');
   $this->Mail_model->sendEmails('forgot_username', $mail_arr); 

// if ($sendmail) {
   $this->redirect( lang('please_check_mail_username'), "forgot-password", TRUE);

// } else { 
// 	$this->redirect( lang('failed_to_send_email'), 'forgot-password', FALSE);
// }
} 
$data['title'] = lang('forgot_username');  
$this->loadView($data);
}

private function verify_forgot_username() { 
  $this->form_validation->set_rules('mail',lang('email_address'), 'required|is_exist[user_info.email]');
  $result =  $this->form_validation->run();

  return $result;
}


public function login_With_otp()
{
  $data['title'] = lang('login_with_otp');  
  $site_details = $this->Base_model->getCompanyInformation();
  $this->load->model('Zone_model');
  $data['default_phone_code'] = $this->Zone_model->CountryIdToPhoneCodeAndName($site_details['country_id']);
  $this->loadView($data);
}
public  function CheckValidMobileNumber() {
  if ($this->input->is_ajax_request()) {
   $mobile=$this->input->post('mobile');
   $user_available = $this->Login_model->isUserMobileNumberAvailable($mobile);
   if ($user_available) {

    $response['status'] = TRUE;
    $response['msg'] = lang('valid_mobile_number');
    $this->output
    ->set_status_header(200)
    ->set_content_type('application/json', 'utf-8')
    ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
    ->_display();
    exit();		
}
else{
    $response['status'] = FALSE;
    $response['msg'] = lang('invalid_mobile_number');
    $this->output
    ->set_status_header(200)
    ->set_content_type('application/json', 'utf-8')
    ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
    ->_display();
    exit();	
}

} 

}
function get_Phone_ajax() {

  if ($this->input->is_ajax_request()) {
   $post = $this->input->post();
   $post['q'] = element('q', $post) ? $post['q'] : '';
   $json = $this->Base_model->getAllPhoneCodeAuto($post['q'],'');
   echo json_encode($json);
}
}


public function OTP_login() 
{  
  if($this->input->is_ajax_request()){
   $login_details = $this->input->post(); 
   $mobile = $login_details['mobile'];
			// $login_details = $this->security->xss_clean( $login_details );
   $user_available = $this->Login_model->isUserMobileNumberAvailable($mobile);
   if($user_available){
    $login_result = $this->Login_model->login_otp( $mobile );
    if ($login_result) { 
     $log_user_type = $login_result[0]->user_type;
     if( ( $log_user_type != 'admin' ) && $this->MAINTENANCE_MODE == 1){

      $response['status'] = FALSE;
      $response['msg'] = $this->MAINTENANCE_TEXT;;
      $this->output
      ->set_status_header(200)
      ->set_content_type('application/json', 'utf-8')
      ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
      ->_display();
      exit();	 
  }

  $this->Login_model->setUserSessionDatas($login_result);
  $this->session->set_userdata('site_social_login', NULL);
  if($this->session->userdata('site_logged_in')){
      $this->Base_model->insertIntoActivityHistory($login_result[0]->user_id, $login_result[0]->user_id, 'Successfull login');

      $response['status'] = TRUE;
      $response['location'] = base_url(). $log_user_type.'/dashboard';
      $this->output
      ->set_status_header(200)
      ->set_content_type('application/json', 'utf-8')
      ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
      ->_display();
      exit();	 
  } 

} else {
 $response['status'] = FALSE;
 $response['msg'] = '<p class="text-red">'.lang('invalid_user').'</p>';
 $this->output
 ->set_status_header(200)
 ->set_content_type('application/json', 'utf-8')
 ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
 ->_display();
 exit();	 
} 	
}else{
    $response['status'] = FALSE;
    $response['msg'] = lang('invalid_mobile_number');
    $this->output
    ->set_status_header(200)
    ->set_content_type('application/json', 'utf-8')
    ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
    ->_display();
    exit();	
}

}
}
public function lock_screen()
{
  $data['title'] = lang('lock_screen');
  $this->session->unset_userdata('site_logged_in');
  $data['datas'] = $this->session->userdata('item');
  $data['details'] = $this->Base_model->getUserDetails($data['datas']['user_id'],'user_photo');
  $this->loadView($data);
}
}