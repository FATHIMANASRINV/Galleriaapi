<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require_once ("Api_Controller.php");
class User extends Api_Controller {

	function __construct() {
		parent::__construct();
		$this->load->model('Member_model');
		$this->load->model('Login_model');
		// $this->load->model('Profile_model');
		$this->load->model('Settings_model');
		$this->load->model('Inventory_model');
		$this->load->model('Tools_model');
		$this->load->model('Signup_model');

		$this->load->model('Dashboard_model');

		$this->load->model('Calculation_model');

	}  

	protected function validate_change_password() 
	{  
		$password_length = $this->software->getSettingValueByKey('password_length');

		$this->form_validation->set_rules('password', lang('password') , 'trim|required|strip_tags|matches[confirmPassword]');
		$this->form_validation->set_rules('confirmPassword', lang('confirm_password') , 'trim|required|strip_tags|min_length['. $password_length .']');

		$this->form_validation->set_rules( 'security_pin', lang('secure_pin'), 'trim|required');

		$val_res = $this->form_validation->run();
		return $val_res;
	}

	public function change_password()
	{ 
		try{
			$token = $this->check_header();  
			$this->load->model('Member_model');

			$user_id=$token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);
			$this->lang->load('member', $this->LANGUAGE);

			if($this->validate_password())
			{

				$post_arr = $this->input->post();
				$current_pass = $post_arr["password"];
				$new_password = $post_arr["new_password"];
				$confirm_password = $post_arr["confirm_password"];
				if($new_password != $confirm_password){
					$msg = "New Password And Confim Password Must Be Same";
					$response['success'] = FALSE;
					$response['msg'] = $msg;
					return $this->setOutput($response);

				}
				
				$password_check = $this->Login_model->login( $user_name, $current_pass );
				if($password_check)
				{
					$this->config->load('bcrypt');
					$this->load->library('bcrypt');
					$hashed_password = $this->bcrypt->hash_password( $confirm_password );

					$update = $this->Member_model->updatePassword($hashed_password, $user_id);

					if ($update){
						$this->Base_model->insertIntoActivityHistory($user_id, $user_id,'reset_password');              
						$msg = lang("Password_updated_successfully");
						$response['success'] = TRUE;
						$response['msg'] = $msg;
						return $this->setOutput($response);
					} else {
						$msg = lang('Error_On_Updation');
						$response['success'] = FALSE;
						$response['msg'] = $msg;
						return $this->setOutput($response);
					}
				}
				else
				{
					$msg = "Invalid Current Password";
					$response['success'] = FALSE;
					$response['msg'] = $msg;

					$response['error_msgs'] = ['password' => 'Invalid Current Password'];
					return $this->setOutput($response);					
				}
			}
			elseif($error = $this->form_validation->error_array()){

				$response['success'] = FALSE;
				$response['msg'] = lang('Invalid fields'); 

				$error =  $this->form_validation->error_array();

				$response['error_msgs'] = $error; 

				return $this->setOutput($response);
			}
		}

		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}


	function check_current_password($data) {

		
		$old_password_hash = $this->Profile_model->selectPassword($data['user_id']);

		$old_password_db_hash = md5($data['password']);
		return ($old_password_hash != $old_password_db_hash) ? false : TRUE;
	}

	private function validate_password()
	{
		$this->form_validation->set_rules('password', 'Current Password', 'trim|required'); 
		$this->form_validation->set_rules('new_password', 'New Password', 'trim|required|min_length[6]'); 
		$this->form_validation->set_rules('confirm_password', 'Confirm Password', 'trim|required|min_length[6]|matches[new_password]'); 
		$response = $this->form_validation->run();


		return $response;
	}


	public function purchase_package()
	{

		try
		{

			$this->load->model('Member_model');
			$packages = $this->Member_model->getPackageDetails('purchase');

			$data['packages']=$packages;

			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function my_shop()
	{

		try
		{

			$search_arr = [
				'status' => 'active', 
			];
			$this->perPage = 20;
			$filter_details['limit'] = $this->perPage;
			$category_id = NULL;
			$this->load->model('Inventory_model');
			if($this->input->get('category'))
				$category_id = $this->Inventory_model->getCategoryIdFromSlug($this->input->get('category'));
			$filter_details['category_id'] = $category_id;
			$filter_details['status'] = 'active';
			$filter_details['available'] = 'yes';
			$filter_details['order_by'] = 'id';
			$filter_details['order'] = 'ASC';
			$data['filter_details'] = $filter_details;
			$data['perPage'] = $this->perPage;
			$filter_details['limit'] = 6;
			$filter_details['order_by'] = 'id';
			$filter_details['order'] = 'DESC';
			$data['category_id'] = $category_id;
			$data['category_name'] = $this->Base_model->getCategoryName($category_id);
			$sub_categories = $sub_category_names = [];
			if($this->input->get('category')){
				$data['category']=$this->Inventory_model->getAllCategory($search_arr);
				$categories = $this->findCatSubsCat($category_id, $this->data['allCategories']);
				$data['categories'] = $categories;
				$sub_categories = !empty($categories) ? $categories['sub_categories'] : [];
				$sub_category_names = !empty($sub_categories) ? array_column($sub_categories, 'category_name', 'slug') : [];

			}		 
			$data['sub_categories'] =$sub_categories;
			$data['sub_category_names'] =$sub_category_names;
			$data['color_details'] = $this->Inventory_model->getColorDetails();
			$dimensions  = $this->Inventory_model->getdimensionDetails();
			$data['dimensions_details'] = array_unique(array_column($dimensions,'name','id'));
			$data['title'] = "My Shop";
			$data['category']=array($this->Inventory_model->getAllCategory($search_arr));

			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function order_history()
	{

		try
		{
			
			$token = $this->check_header();
			$user_id = $token->user_id;
			if($this->input->post()) {

				$post = $this->input->post();
				$from_date = $post['from_date'];
				$to_date = $post['end_date'];	
				$order_status=$post['order_status'];			
			}
			else
			{
				$from_date = '';
				$to_date = '';	
				$order_status='';

			}

			$data['order_details'] = $this->Inventory_model->getOrderDetailsUser($user_id,$order_status,$from_date, $to_date);


			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function news()
	{

		try
		{
			$this->load->model('Tools_model');
			$news_details = $this->Tools_model->getToolsDetails('','news');
			$data['news_details'] =   $news_details;
			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}

	public function events()
	{

		try
		{
			$this->load->model('Tools_model');
			$appointments = array();
			$appointments = $this->Tools_model->getToolsDetails('','events');
			$data['appointments'] =   $appointments;
			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function available_efiles()
	{

		try
		{
			
			$this->load->model('Tools_model');
			$data['title'] = lang('text_download_efiles');
			$efile_details = $this->Tools_model->getToolsDetails('','efiles');
			$data['efile_details'] =   $efile_details;
			$response['success'] = TRUE;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}


	public function profile_update()
	{
		try
		{

			$token = $this->check_header();
			$this->load->model('Member_model');

			$user_id=$token->user_id;

			if($this->validate_profile_update())
			{ 


				$post_arr = $this->input->post();
				$this->Member_model->begin();
				$update_profile =  $this->Member_model->updateUserProfile( $post_arr, $user_id );

				if($update_profile)
				{    

					$this->Member_model->commit();
					$this->Base_model->insertIntoActivityHistory( $token->user_id, $token->user_id, 'profile updated', serialize($post_arr) ) ;

					$response['success'] = TRUE;
					$response['msg'] = lang('profile_updated');

					return $this->setOutput($response);
				}else{
					$this->Member_model->rollback();
					$response['success'] = FALSE;
					$response['msg'] = lang('error_on_profile_updation'); 

					$response['error_msgs']=['Failed'=>'Error on Profile Updation'];
					return $this->setOutput($response);
				}

			}

			else{
				$response['success'] = FALSE;
				$response['msg'] = lang('Invalid fields'); 

				$error =  $this->form_validation->error_array();

				$response['error_msgs'] = $error; 

				return $this->setOutput($response);
			}
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}

	function validate_profile_update()
	{
		$len_mob = value_by_key("phone_number_length");
		$this->form_validation->set_rules('first_name', lang('firstname'), 'trim|required');
		$this->form_validation->set_rules('second_name', lang('secondname'), 'trim|required');
		$this->form_validation->set_rules('zip_code', lang('zipcode'), 'trim|required');
		$this->form_validation->set_rules('city', lang('city'), 'trim|required');
		$this->form_validation->set_rules('email', lang('email'), 'trim|required|valid_email');
		$this->form_validation->set_rules('mobile', lang('mobile'), 'required|min_length['.$len_mob.']|max_length['.$len_mob.']|numeric');
		$this->form_validation->set_rules('address', lang('address'), 'trim|required');

		$validate_form = $this->form_validation->run();
		return $validate_form;


	}
	public function wallet_summary()
	{
		try
		{

			$token = $this->check_header();  
			$this->load->model('Dashboard_model');
			$user_id = $token->user_id;
		
			$user_wallet = $this->Dashboard_model->getUserWalletDetails($user_id);

			$data['credit_summary'] = array([

				'referral_bonus'=>$user_wallet['referral_bonus'],
				'level_bonus'=>$user_wallet['level_bonus'],
				'fund_added'=>$user_wallet['add_fund'],
				'rank_bonus' =>$user_wallet['rank_bonus']


			]);

			$data['debit_summary'] = [
				[
					'wallet_withdrawal'     => $this->currency->format($user_wallet['wallet_withdrawal']),
					'ewallet_register'      => $this->currency->format($user_wallet['ewallet_register']),
					'fund_deducted'         => $this->currency->format($user_wallet['deduct_fund']),
					'fund_transfer/recieved'=> $this->currency->format($user_wallet['fund_transfer']),
					'payout_delete'         => $this->currency->format($user_wallet['payout_delete']),
					'payout_request'        => $this->currency->format($user_wallet['payout_request']),
				]
			];


			$data['total_wallet_amount']=$user_wallet['wallet'];

			$data['credit']=$user_wallet['referral_bonus']+$user_wallet['level_bonus']+$user_wallet['add_fund']+$user_wallet['rank_bonus'];
			$data['debit']=abs($user_wallet['wallet_withdrawal'])+abs($user_wallet['ewallet_register'])+abs($user_wallet['deduct_fund'])+abs($user_wallet['fund_transfer'])+abs($user_wallet['payout_request']);

			if (!empty($user_wallet)) {
				foreach ($user_wallet as $key => $value) {
					if (is_numeric($value)) {
						$user_wallet[$key] = $this->currency->format($value); 
					}
				}
			}

			$data['user_wallet']=$user_wallet;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}

	public function fund_transfer()
	{
		try
		{

			$this->load->model('Business_model');
			$enc_id=$this->input->post('to_user');

			$token = $this->check_header();  
			$user_id = $token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);
			if($enc_id){

				$req_id = $this->Base_model->encrypt_decrypt('decrypt',$enc_id);
				$data['id']=$req_id;
				$data['user']=$this->Base_model->getUserName($req_id);

			}


			$codeContents = '192.168.1.35/WORKS/Matrix-demo/user/business/fund-transfer/'.$enc_id;
			$qr_code = $this->Signup_model->generateQRcode($codeContents,$user_name);

			$data['qr_code']=$qr_code;


			if($this->input->post() && $this->validate_transfer())
			{

				$post_arr = $this->input->post();


				$from_id = $user_id;
				$from_name = $user_name;

				$to_userid =$this->Base_model->getUserId($post_arr["to_user"]);
				$to_name = $post_arr["to_user"];
				$total_amount = $post_arr["amount"];

				$security_pass = $post_arr["security_pin"]; 
				$current_balance = $this->Base_model->getUserWallet($from_id);

				if( $total_amount > $current_balance )
				{
					$msg = lang("text_invalid_amount");
					$response['success'] = FALSE;
					$response['msg'] = $msg;

					return $this->setOutput($response);

				}
				else if(!$this->Business_model->isSecurePinValid($user_id,$security_pass))

				{
					$msg = lang("text_invalid_security_pass");
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					return $this->setOutput($response);
				}

				$date_of_submission = date('Y-m-d H:i:s');
				$this->Business_model->begin();
				$this->load->model('Calculation_model');

				$comm = [
					'user_id' => $to_userid,
					'total_amount' => $total_amount,
					'date_of_submission' => $date_of_submission,
					'from_id' => $from_id,
					'transaction_note' => $post_arr['trans_note'],
					'fund_transfer_type' => 'credit',
				];

				$amount_added=$this->Calculation_model->insertCommissionDetails( $comm,'fund_transfer','fund_transfer');


				$comm = [
					'user_id' => $from_id,
					'total_amount' => -$total_amount,
					'date_of_submission' => $date_of_submission,
					'from_id' => $to_userid,
					'transaction_note' => $post_arr['trans_note'],
					'fund_transfer_type' => 'debit',
				];
				$amount_deducted = $this->Calculation_model->insertCommissionDetails( $comm,'fund_transfer','fund_transfer'); 


				if ($amount_added && $amount_deducted) {
					$this->Business_model->commit();

					$this->Base_model->insertIntoActivityHistory( $to_userid, $from_id, 'fund_transfer_to', serialize($post_arr), $total_amount );
					$msg = lang('fund_transfered_successfully');
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					return $this->setOutput($response);



				} else {
					$this->Business_model->rollback();
					$msg = lang('error_on_fund_transferring');
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					return $this->setOutput($response);
				}
			}
			else
			{

				$response['success'] = FALSE;
				$response['msg'] = lang('Invalid fields'); 

				$error =  $this->form_validation->error_array();

				$response['error_msgs'] = $error; 

				return $this->setOutput($response);

			}


		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function validate_transfer() {
		$this->form_validation->set_rules('from_user', lang('from_user'), 'required|is_exist[user_info.user_name]');
		$this->form_validation->set_rules('to_user', lang('to_user'), 'required|is_exist[user_info.user_name]|differs[from_user]');
		$this->form_validation->set_rules('amount', lang('amount'), 'required|greater_than[0]');
		$this->form_validation->set_rules('security_pin', lang('security_pin'), 'required');

		$result =  $this->form_validation->run();

		return $result;
	}
	public function payout_request()
	{ 


		try{
			$token = $this->check_header();  

			$user_id = $token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);
			$this->load->model('Business_model');

			$max_amt = value_by_key('max_withdraw_amt');
			$min_amt = value_by_key('min_withdraw_amt');
			$transaction_fee = value_by_key('transaction_fee');

			$current_balance = $this->Base_model->getUserWallet($user_id);
			$payout=$this->Business_model->getPayoutRequests($user_id);


			$data['payout']=$payout;
			$data['max_amt'] = $max_amt;
			$data['min_amt'] = $min_amt;
			$data['transaction_fee'] = $transaction_fee;
			$data['current_balance'] = $current_balance;


			if($this->input->post() && $this->validate_payout_request())
			{

				$post_arr = $this->input->post();

				$amount = $post_arr['amount'];
				$security_pass = $post_arr["security_pin"];
				$total_amount =$amount;

				$this->load->model('Calculation_model');
				if( $total_amount > $current_balance | $amount < $min_amt | $amount > $max_amt)
				{
					$msg = lang("text_invalid_amount");
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					// $response['data'] = $data;
					return $this->setOutput($response);

				}
				else if(!$this->Business_model->isSecurePinValid($user_id,$security_pass))

				{
					$msg = lang("text_invalid_security_pass");
					$response['success'] = FALSE;
					$response['msg'] = $msg;
					// $response['data'] = $data;
					return $this->setOutput($response);
				}

				foreach ($payout as $v){  
					if($v['status'] == 'pending')
					{
						$msg = lang('already_have_a_pending_request');
						$response['success'] = False;
						$response['msg'] = $msg;
						// $response['data'] = $data;
						return $this->setOutput($response);
					}
				}


				$this->Business_model->begin();

				$result = $this->Business_model->insertPayoutRequest($user_id,$amount,$transaction_fee,'wallet') ;

				$comm = [
					'user_id' => $user_id,
					'total_amount' => -$total_amount,
					'date_of_submission' => date('Y-m-d H:i:s'),
					'from_id' => $user_id,
					'transaction_note' => 'payout_request',
					'fund_transfer_type' => 'debit',
				];
				$up_date = $this->Calculation_model->insertCommissionDetails( $comm,'payout_fund','payout_request'); 


				$data['payout']=$payout;
				$data['max_amt'] = $max_amt;
				$data['min_amt'] = $min_amt;
				$data['transaction_fee'] = $transaction_fee;
				$data['current_balance'] = $current_balance;

				if($result && $up_date)
				{
					$this->Business_model->commit();
					$this->Base_model->insertIntoActivityHistory( '', $user_id, 'payout_requested', serialize($comm), $total_amount );     
					$msg = lang("payout_requested_success");
					$response['success'] = True;
					$response['msg'] = $msg;
					// $response['data'] = $data;
					$data['payout']=$payout;

					return $this->setOutput($response);
				}
				else
				{
					$this->Business_model->rollback();

					$msg = lang("payout_requested_error");
					$response['success'] = False;
					$response['msg'] = $msg;
					$data['payout']=$payout;
					// $response['data'] = $data;


					return $this->setOutput($response);
				}

			}
			else
			{
				$response['success'] = FALSE;
				$response['msg'] = lang('Invalid fields'); 

				$error =  $this->form_validation->error_array();

				$response['error_msgs'] = $error; 
				// $response['data'] = $data;

				return $this->setOutput($response);
			}

			$requests = $this->Business_model->getPayoutRequests($user_id);
			$data['requests'] = $requests;

			$data['user_name'] = $user_name;
			$data['user_id'] = $user_id;

		}

		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function get_wallet_details()
	{ 


		try{
			$token = $this->check_header();  

			$user_id = $token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);
			$this->load->model('Business_model');

			$data['max_amt'] = value_by_key('max_withdraw_amt');
			$data['min_amt'] = value_by_key('min_withdraw_amt');
			$data['transaction_fee'] = value_by_key('transaction_fee');

			$data['current_balance'] = $this->Base_model->getUserWallet($user_id);

			$requests = $this->Business_model->getPayoutRequests($user_id);

			$data['requests']=$requests;


			return $this->setOutput($data);


		}

		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}

	public function validate_payout_request() {

		$transction_fee = value_by_key('transaction_fee');
		$max = value_by_key('max_withdraw_amt') +  $transction_fee ;
		$min = value_by_key('min_withdraw_amt');

		$this->form_validation->set_rules('amount', lang('amount'), 'required|numeric');
		$this->form_validation->set_rules('security_pin', lang('security_pin'), 'required');

		$result =  $this->form_validation->run();
		return $result;
	}

	public function user_joining()
	{
		try
		{
			$token = $this->check_header();  
			$user_id = $token->user_id;
			$post_arr = $this->input->post();

			$this->load->model('Report_model');
			$user_joining = $this->Report_model->getUserJoiningAjax($post_arr);

			$data['user_joining']=$user_joining;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function wallet_details_report()
	{
		try
		{
			$token = $this->check_header();  
			$user_id = $token->user_id;

			$post_arr = $this->input->post();
			$post_arr['user_id']=$user_id;

			$this->load->model('Report_model');


			$wallet_details = $this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='referral_bonus';
			$referral_bonus=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='rank_bonus';
			$rank_bonus=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='fund_transfer';
			$fund_transfer=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='level_bonus';
			$level_bonus=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='add_fund';
			$add_fund=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='deduct_fund';
			$deduct_fund=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='payout_request';
			$payout_request=$this->Report_model->getUserWalletDetailsAjax($post_arr);

			$post_arr['wallet']='payout_delete';
			$payout_delete=$this->Report_model->getUserWalletDetailsAjax($post_arr);
			// $post_arr['wallet']='roi_amount';
			// $data['roi_amount']=$this->Report_model->getUserWalletDetailsAjax($post_arr);
			$data['referral_bonus']=$referral_bonus[0]['total'];
			$data['rank_bonus']=$rank_bonus[0]['total'];
			$data['fund_transfer']=$fund_transfer[0]['total'];
			$data['level_bonus']=$level_bonus[0]['total'];
			$data['add_fund']=$add_fund[0]['total'];
			$data['deduct_fund']=$deduct_fund[0]['total'];
			$data['payout_delete']=$payout_delete[0]['total'];


			$data['wallet_details']=$wallet_details[0];
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function add_deduct_amount_report()
	{
		try
		{
			$token = $this->check_header();  
			$user_id = $token->user_id;
			$post_arr = $this->input->post();

			$this->load->model('Report_model');
			$add_deduct = $this->Report_model->getAddDeductReportAjax($post_arr);

			$data['add_deduct']=$add_deduct;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function package_purchase_report()
	{
		try
		{
			$token = $this->check_header();  
			$user_id = $token->user_id;
			$post_arr = $this->input->post();

			$this->load->model('Report_model');
			$package_purchase = $this->Report_model->getPackagePurchaseHistoryAjax($post_arr);

			$data['package_purchase']=$package_purchase;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 


	}
	public function wallet_summary_report()
	{
		try
		{
			$token = $this->check_header();  
			$user_id = $token->user_id;
			$post_arr = $this->input->post();
			$this->load->model('Report_model');
			$wallet_summary = $this->Report_model->getSummaryDetailAjax($post_arr,0,$post_arr['table']);


			$post_arr['category_name']='add_fund';
			$table = 'add_deduct_fund';	

			$data['add_fund']= $this->Report_model->getSummaryDetailAjax($post_arr,0,$table);
			$post_arr['category_name']='deduct_fund';
			$table = 'add_deduct_fund';	

			$data['deduct_fund']= $this->Report_model->getSummaryDetailAjax($post_arr,0,$table);
			$post_arr['category_name']='payout_request';
			$table = 'payout_fund';	

			$data['payout_request']= $this->Report_model->getSummaryDetailAjax($post_arr,0,$table);
			$post_arr['category_name']='payout_delete';
			$table = 'payout_fund';	
			$data['payout_delete']= $this->Report_model->getSummaryDetailAjax($post_arr,0,$table);

			$post_arr['category_name']='wallet_withdrawal';
			$data['wallet_withdrawal']= $this->Report_model->getSummaryDetailAjax($post_arr,0,$table);


			$data['wallet_summary']=$wallet_summary;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function rank_report()
	{
		try
		{
			$token = $this->check_header();  

			$post_arr = $this->input->post();
			$post_arr['user_id'] = $token->user_id;
			$this->load->model('Report_model');
			$rank = $this->Report_model->getRankReportAjax($post_arr);

			$data['rank_details']=$rank;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function change_sponsor_name_report()
	{
		try
		{
			$token = $this->check_header();  

			$post_arr = $this->input->post();
			$post_arr['user_id'] = $token->user_id;
			$this->load->model('Report_model');
			$change_sponsor_name = $this->Report_model->getSponsorNameUpdations($post_arr['user_id'],$post_arr['from_date'],$post_arr['end_date']);

			$data['change_sponsor_name_details']=$change_sponsor_name;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function roi_details_report()
	{
		try
		{
			$token = $this->check_header();  

			$post_arr = $this->input->post();
			$post_arr['user_id'] = $token->user_id;
			$this->load->model('Report_model');
			$roi_details = $this->Report_model->getSponsorNameUpdations($post_arr['user_id'],$post_arr['from_date'],$post_arr['end_date']);

			$data['roi_details_details']=$roi_details;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function block_roi_users_history_report()
	{
		try
		{
			$token = $this->check_header();  

			$post_arr = $this->input->post();
			$post_arr['user_id'] = $token->user_id;
			$this->load->model('Report_model');
			$block_roi_users_history_details = $this->Report_model->getBlockRoiUsersDetails($post_arr['user_id'],$post_arr['from_date'],$post_arr['end_date']);

			$data['block_roi_users_history_details']=$block_roi_users_history_details;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function my_tickets()
	{
		try
		{
			$token = $this->check_header();  

			$post_arr = $this->input->post();
			$this->load->model('Support_model');
			$post_arr['user_id'] = $token->user_id;
			$status_search_arr = $priority_search_arr = $topic_search_arr = array();
			$searched_ticket_id = NULL;
			if($this->input->post('search')){

				$searched_ticket_id = $this->Support_model->ticketNameToId($this->input->post('ticket_name'));
				if(!$searched_ticket_id && $this->input->post('ticket_name')){
					$msg = lang('error_you_can\'t_access_this_ticket');
					$response['success'] = False;
					$response['msg'] = $msg;
					return $this->setOutput($response);

				}

				$status_search_arr = $this->input->post('status_ids');
				$priority_search_arr = $this->input->post('priority_ids');
				$topic_search_arr = $this->input->post('topic_ids');
			}

			$ticket_arr = $this->Support_model->getAllTickets($searched_ticket_id, $post_arr['user_id'], $status_search_arr, $priority_search_arr, $topic_search_arr);
			$status_arr = $this->Support_model->getSupportSettings('status');
			$data['status_arr'] = $status_arr;
			$data['ticket_arr'] = $ticket_arr;
			$response['data'] =  $data;

			return $this->setOutput($response);

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function create_new_ticket()
	{
		try
		{
			$token = $this->check_header();  


			$this->load->model('Support_model');


			// print_r($post_arr['user_id']);die();
			if($this->input->post() && $this->validate_create()){

				$post_arr = $this->input->post();
				$post_arr['user_id'] = $token->user_id;
				// $post_arr = $this->security->xss_clean( $post_arr);
				$this->Support_model->begin(); 

				$post_arr['file_name'] = NULL;
				if(isset($_FILES['userfile']) && $_FILES['userfile']['error']!=4)
				{
					$config['upload_path'] = './assets/uploads/efiles/';
					$config['allowed_types'] = 'gif|jpg|png|jpeg|gif';
					$config['max_size'] = '2000000';
					$config['remove_spaces'] = true;
					$config['overwrite'] = false;
					$config['encrypt_name'] = TRUE;

					$this->load->library('upload', $config);
					$msg = '';
					if (!$this->upload->do_upload()) {
						$msg = lang('image_not_selected');
						$error = $this->upload->display_errors();
						$response = [
							'success' => FALSE,
							'msg' => $error,
						];
						return $this->setOutput($response);

					} else {
						$image_arr = $this->upload->data();  
						$post_arr['file_name']=$image_arr['file_name'];
					}
				}
				$ticket_details = $this->Support_model->insertTicket($post_arr);

				if ($ticket_details['status']) {
					$this->Support_model->commit();
					$post_arr['ticket_id'] = $ticket_details['ticket_id'];
					$ticket_name = $ticket_details['ticket_name'];
					$data = serialize($post_arr);          
					$this->Base_model->insertIntoActivityHistory($post_arr['user_id'], $post_arr['user_id'],'ticket_created', $data);            
					$msg = sprintf(lang('success_ticket_created'),  base_url().log_user_type().'/support/my_tickets', $ticket_name);
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					return $this->setOutput($response);

				} else {
					$this->Support_model->rollback();
					$msg = lang('error_ticket_creation');
					$response['success'] = False;
					$response['msg'] = $msg;
					return $this->setOutput($response);

				}

				$response['data'] =  $data;

				return $this->setOutput($response);

			}
			else
			{
				$response['success'] = FALSE;
				$response['msg'] = lang('Invalid fields'); 

				$error =  $this->form_validation->error_array();

				$response['error_msgs'] = $error; 

				return $this->setOutput($response);
			}
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	function validate_create() 
	{
		$this->form_validation->set_rules('priority', lang('text_priority'), 'trim|required|numeric|callback_check_priority');
		$this->form_validation->set_rules('topic', lang('text_topic'), 'trim|required|numeric|callback_check_topic');
		$this->form_validation->set_rules('subject', lang('text_subject'), 'trim|required|htmlentities');
		$this->form_validation->set_rules('message', lang('text_message'), 'trim|required|htmlentities');

		$result =  $this->form_validation->run(); 

		return $result;
	}
	function check_priority($priority_id) {
		if(!$this->Support_model->checkPriorityExist($priority_id))
		{
			$this->form_validation->set_message('check_priority', lang("error_priority_not_exist"));
			return FALSE;
		} 
		return TRUE;
	}

	function check_topic($topic_id) {
		if(!$this->Support_model->checkTopicExist($topic_id))
		{
			$this->form_validation->set_message('check_topic', lang("error_topic_not_exist"));
			return FALSE;
		} 
		return TRUE;
	}


	public function buy_package()
	{
		try
		{
			$token = $this->check_header();  
			$post_arr = $this->input->post();
			$post_arr['user_id'] = $token->user_id;

			$user_id=$token->user_id;
			$new_package_id = $post_arr['package_id'];
			$this->load->model('Member_model');
			$package_details = $this->Member_model->getPackageDetails('purchase', $new_package_id);


			if($package_details) {

				$data['new_package_amount'] = $package_details['amount'];
				$date=date('Y-m-d H-i-s');

				$package_id=$this->Base_model->getUserPackageId($user_id);

				if($this->input->post('payment_method'))
				{
					$post_arr=$this->input->post();

					if($post_arr['payment_method'] == 'Free') {

						$this->Member_model->begin();
						$user_info = $this->Base_model->getUserDetails($user_id); 
						$insertLevel = $this->Calculation_model->insertLevelBonus($user_info['father_id'], $data['new_package_amount'], $user_id, $date);

						$updatePackage = $this->Member_model->upgradeUserPackage($user_id ,$new_package_id);
						$roi_days=value_by_key('roi_days');

						$insertUpgradeHistory = $this->Member_model->insertUpgradeHistory($user_id ,$package_id ,$new_package_id , $post_arr['payment_method'], 'user', $data['new_package_amount'], $date,$roi_days);

						if( $insertLevel && $updatePackage && $insertUpgradeHistory ){

							$this->Member_model->commit();
							$this->Base_model->insertIntoActivityHistory('', $user_id,'upgrade_package', serialize($post_arr));

							$msg=lang("package_upgrade_successfully");

							$response['success'] = TRUE;
							$response['msg'] = $msg;
							return $this->setOutput($response);

						}
						else{
							$this->Member_model->rollback();
							$msg=lang('upgrade_failed');

							$response['success'] = False;
							$response['msg'] = $msg;
							return $this->setOutput($response);


						}
					}
				}
			}else{

				$msg=lang('invalid_package');
				$response['success'] = TRUE;
				$response['msg'] = $msg;
				return $this->setOutput($response);

			}

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}


	public function genealogy_tree()
	{
		try
		{
			$token = $this->check_header();
			$user_id=$token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);
			$this->load->model('Network_model');

			if($this->input->post() && $this->validate_user_search()){

				$post_arr = $this->input->post(); 

				$user_name = $this->Base_model->getUserName($post_arr['user_id']);
				$user_id = $post_arr['user_id'];
				$msg=lang("genealogy_tree_fetched");

				$response['success'] = TRUE;
				$response['msg'] = $msg;
				return $this->setOutput($response);

			}
			else
			{
				$this->error_array['error_msgs'] = $this->form_validation->error_array();
				$response = $this->error_array;
				return $this->setOutput($response);
			}
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}

	function validate_user_search()
	{
		$this->form_validation->set_rules('user_id', lang('text_user'), 'trim|required|callback_check_valid_user');
		$this->form_validation->set_message('check_valid_user', lang('text_the_username_is_not_available'));

		$validation_result = $this->form_validation->run();

		return $validation_result;
	}
	function check_valid_user($user_name) {
		if ($this->Base_model->getUserName($user_name)) {
			return TRUE;
		}
		return FALSE;
	}

	public function hierarchical_view()
	{
		try
		{
			$token = $this->check_header();
			$user_id=$token->user_id;
			$this->load->model('Network_model');

			if($user_id){
				$downlines=$this->Network_model->getUsersDowlinesnew($user_id);

			}
			$msg=lang("hierarchical_view_success");

			$response['success'] = TRUE;
			$response['msg'] = $msg;
			return $this->setOutput($response);


		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}
	public function referral_tree()
	{
		try
		{
			$token = $this->check_header();
			$user_id=$token->user_id;
			$user_name=$this->Base_model->getUserName($user_id);
			$this->load->model('Network_model');

			if($this->input->post() && $this->validate_user_search_refferal()){

				$post_arr = $this->input->post(); 
				$user_id = $post_arr['user_id'];
				$user_name = $this->Base_model->getUserName($user_id);
				$msg=lang("referral_tree_fetched");

				$response['success'] = TRUE;
				$response['msg'] = $msg;
				return $this->setOutput($response);

			}
			else
			{
				$this->error_array['error_msgs'] = $this->form_validation->error_array();
				$response = $this->error_array;
				return $this->setOutput($response);
			}

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	function validate_user_search_refferal()
	{
		$this->form_validation->set_rules('user_id', lang('text_user'), 'trim|required|callback_check_valid_user_ref');
		$this->form_validation->set_message('check_valid_user_ref', lang('text_the_username_is_not_available'));

		$validation_result = $this->form_validation->run();

		return $validation_result;
	}
	function check_valid_user_ref($user_id) {
		if ($this->Base_model->getUserName($user_id)) {
			return TRUE;
		}else{

			return FALSE;
		}
	}
	public function invite_friend()
	{
		try
		{

			$this->load->model('Network_model');
			$data=$this->Network_model->getReferralBonus();
			$data['referral_bonus'] = $data[5]['value'];
			$this->load->model('Network_model');

			if ($this->input->post()) {

				$post_arr = $this->input->post(); 

				$mail_arr = array(
					'email' => $post_arr['email'],
					'first_name' => $post_arr['email']
				);
				$this->load->model('Mail_model');
				$result=$this->Mail_model->sendEmails('invite_mail', $mail_arr);

				if($result){
					$msg = lang('invitaion_send_successfully');
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					return $this->setOutput($response);

				}
				else{ 
					$msg = lang('try_again');
					$response['success'] = False;
					$response['msg'] = $msg;
					return $this->setOutput($response);

				}

			}

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 
	}

	public function my_shop_filter()
	{
		try
		{
			$this->load->library("pagination");
			$lastID = $this->input->post('lastID');
			$post_arr = $this->input->post();
			$filter_params['returnType'] = "count";
			$category_id='';
			$filter_params['color'] =$this->input->post('color');
			$filter_params['dimension'] =$this->input->post('dimension');
			$filter_params['category'] =$this->input->post('category');
			$filter_params['status'] = 'active';
			$filter_params['available'] = 'yes';
			$filter_params['order_by'] = 'id';
			$filter_params['order'] = 'ASC';
			$data['postNum'] = $this->Inventory_model->getProductDetails( $filter_params );
			$filter_params['order_by'] = '';
			$filter_params['returnType'] = '';
			$filter_params['order_by'] = 'id';
			$filter_params['order'] = 'ASC';
			$config['base_url'] = base_url("user/inventory/more_datas");
			$config['total_rows'] =$data['postNum'];
			$config['per_page'] = '9';
			$config['uri_segment'] = 4;
			$choice = $config['total_rows'] / $config['per_page'];
			$this->pagination->initialize($config);
			$data['page'] = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;
			$filter_params['per_page'] = '9';
			$filter_params['page'] = $data['page'];
			// $view['product_details'] =  $this->Inventory_model->getProductDetails( $filter_params );
			// $view["links"] = $this->pagination->create_links();

			$data['product_details'] =  $this->Inventory_model->getProductDetails( $filter_params );
			$data["links"] = $this->pagination->create_links();

			// $data['post']=  $this->smarty->view('user/inventory/product_grid.tpl', $view, true);
			return $this->setOutput($data);
		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 

	}
	public function change_security_pin()
	{ 
		$token = $this->check_header();  
		$user_id=$token->user_id;

		try{
			if($this->input->post() && $this->validate_update_security_pin())
			{ 
				$post_arr = $this->input->post();
				$current_pin = $this->Base_model->getUserInfoField('secure_pin',$user_id);

				if($current_pin == $post_arr['old_pin'])
				{
					if($this->Member_model->updateSecurePin($post_arr['new_pin'] , $user_id ))
					{
						$msg=lang("success_pin_updation");
						$response['success'] = TRUE;
						$response['msg'] = $msg;
						return $this->setOutput($response);
						
					}else{

						$msg=lang("failed_pin_updating");
						$response['success'] = False;
						$response['msg'] = $msg;
						return $this->setOutput($response);
						
					}
				}
				else
				{

					$msg=lang("invalid_old_pin");
					$response['success'] = TRUE;
					$response['msg'] = $msg;
					return $this->setOutput($response);

					
				}
			}
			else
			{
				$this->error_array['error_msgs'] = $this->form_validation->error_array();
				$response = $this->error_array;
				return $this->setOutput($response);
			}

		}
		catch( Exception $e )
		{
			log_message( 'error', $e->getMessage( ) . ' in ' . $e->getFile() . ':' . $e->getLine() );
		} 



	}
	function validate_update_security_pin() {
		$password_length_min = value_by_key('password_min_len');
		$password_length_max = value_by_key('password_max_len');
		$this->form_validation->set_rules('old_pin', lang('old_pin'), 'required');

		$this->form_validation->set_rules('new_pin', lang('new_pin'), 'required|min_length[8]|max_length[8]|differs[old_pin]');
		$this->form_validation->set_rules('confirm_pin', lang('confirm_pin'), 'required|min_length[8]|max_length[8]|matches[new_pin]');
		$result =  $this->form_validation->run();
		return $result;
	}

}
