<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Dashboard extends Base_Controller {

    function __construct()
    {
        parent::__construct(); 	
    }

    function index()
    {   
        $user_id=log_user_id();
        $data['title'] = lang('dashboard');

        $data['events'] = $this->Dashboard_model->getToolsDetails('','events') ;
        $data['json_events'] = json_encode($data['events']) ;


        $user_wallet = $this->Dashboard_model->getUserWalletDetails($user_id);
        $data['user_wallet']=$user_wallet;
        // if(!empty($user_wallet['wallet']))
        // {
        //     $data['referral_per'] = round(($user_wallet['referral_bonus']/$user_wallet['wallet'])*100 ,2);

        //     $data['level_per'] =round(($user_wallet['level_bonus']/$user_wallet['wallet'])*100 ,2);

        //     $data['withdrawal_per'] = round(($user_wallet['wallet_withdrawal']/$user_wallet['wallet'])*100,2);
        //     $data['fund_transfer'] = round(($user_wallet['fund_transfer']/$user_wallet['wallet'])*100,2);
        // }
        // else
        // {
        //     $data['referral_per'] = 0 ;
        //     $data['level_per']    =0 ;
        //     $data['withdrawal_per'] = 0;
        // }

        $months = $joinees = '';

        for($n=11;$n>=0;$n--)
        {

          $month = date('m',strtotime(" - $n month"));
          $year = date('Y',strtotime(" - $n month"));
          $month_year[$n]['month_name'] = date('M',strtotime(" - $n month"));
          $joinees.= "'".count($this->Dashboard_model->getUserReferrals($user_id,$month,'','',$year))."',";
          $months.="'".$month_year[$n]['month_name']."',";

      }

      $data['months']=$months;
      $data['joinees']=$joinees;
      $package=$this->Base_model->getUserPackageId($user_id);
      $this->load->model('Settings_model');
      $data['roi']=element('roi',$this->Settings_model->getPackageDetails($package));

        // $month_year = array();
        // $month_names = array();

        // for($n=0;$n<12;$n++)
        // {
        //     $month_year[$n]['value']=$n;

        //     $month_year[$n]['month']= date('m',strtotime(" - $n month"));
        //     $month_year[$n]['month_name']= date('M',strtotime(" - $n month"));
        //     $month_year[$n]['year']= date('Y',strtotime(" - $n month"));
        //     $month_year[$n]['date']= date('Y-m-d',strtotime(" - $n month"));
        //     $month_names[] =$month_year[$n]['month_name'];


        // }

        // $data['month_year'] =  $month_year;

        // $data['month_names'] = json_encode($month_names);

        // $day_limit = ['01','04','08','12','16','20','24','28','31'];
        // $i=0; 
        // $j=0;

        // foreach($month_year as $v)
        // {
        //     for($j=0;$j<8;$j++)
        //     {

        //         $start_day=  $day_limit[$j];
        //         $end_day = $day_limit[$j+1];
        //         $month =  $month_year[$i]['month'];
        //         $year =  $month_year[$i]['year'];


        //         $data[$i]=$this->Dashboard_model->getUserReferrals($user_id,$month,$start_day,$end_day, $year);
        //         $total_referrals[$i][]=count($data[$i]);


        //     }



        //     $i++;	
        // }

        // for($i=0,$j=1; $i<=11; $i++,$j++)
        // {
        //     $data['m'.$j] = json_encode($total_referrals[$i]);
        // }

      $recent_referrals = $this->Dashboard_model->getRecentReferrals($user_id);

      $this->load->model('Support_model');
      $data['ticket_count'] = $this->Support_model->getTicketCountByType($user_id);
      $resolved_id = $this->Support_model->getTicketStatusToid('Resolved');
      $data['resolved_count'] = $this->Support_model->getTicketCountByType($user_id, 'status_id', $resolved_id);

      $data['recent_referrals'] =  $recent_referrals;
      $data['top_recruiters']=$this->Dashboard_model->getCountRecruiters();
      $data['total_users'] = $this->Base_model->getTotalUsers($user_id);
      $data['total_investment'] = $this->Dashboard_model->getTotalInvestAmount($user_id);
      $data['payout_release'] = $this->Dashboard_model->getUserPayoutAmount($user_id,'released');
      $data['payout_pending'] = $this->Dashboard_model->getUserPayoutAmount($user_id,'pending');
      $data['curent_rank'] = $this->Dashboard_model->getCurrentRank(log_user_id());
        // $data['total_sales_pending'] = $this->Dashboard_model->getTotalSales(log_user_id(),'Pending');
        // $data['total_sales'] = $this->Dashboard_model->getTotalSales(log_user_id(),'Delivered');
        // $data['total_products'] = $this->Dashboard_model->getTotalProducts();
        // $data['total_sales_count'] = $this->Dashboard_model->getTotalSales('','','count');
      $this->loadView($data);
  }


  public function getDashboardDatas()
  {
    $this->load->model('Business_model');
    if ($this->input->is_ajax_request() ) {

        $user_id=log_user_id();
        $response['total_users'] = $this->Base_model->getTotalUsers($user_id);
        $total_investment= $this->Dashboard_model->getTotalInvestAmount($user_id);
        $response['total_investment']=cur_format($total_investment);
        $payout_release= $this->Dashboard_model->getUserPayoutAmount($user_id,'released');
        $response['payout_release']=cur_format($payout_release);
        $payout_pending = $this->Dashboard_model->getUserPayoutAmount($user_id,'pending');
        $response['payout_pending']=cur_format($payout_pending);
        $response['curent_rank'] = $this->Dashboard_model->getCurrentRank($user_id);

        $user_wallet = $this->Dashboard_model->getUserWalletDetails($user_id);


        if(!empty($user_wallet['wallet']))
        {
            $referral_per = round(($user_wallet['referral_bonus']/$user_wallet['wallet'])*100 ,2);
            $response['referral_per'] = $referral_per;
            $response['referral'] = cur_format($referral_per);

            $level_per =round(($user_wallet['level_bonus']/$user_wallet['wallet'])*100 ,2);
            $response['level_per'] =cur_format($level_per);
            $response['level_bar'] =$level_per;


            $withdrawal_per = round(($user_wallet['wallet_withdrawal']/$user_wallet['wallet'])*100,2);
            $response['withdrawal_per'] = cur_format($withdrawal_per);
            $response['withdrawal']=$withdrawal_per;

            $matrix_per = round(($user_wallet['matrix_bonus']/$user_wallet['wallet'])*100,2);
            $response['matrix_per'] = cur_format($matrix_per);
            $response['matrix']=$matrix_per;

            $rank_per = round(($user_wallet['rank_bonus']/$user_wallet['wallet'])*100,2);
            $response['rank_per'] = cur_format($rank_per);
            $response['rank']=$rank_per;


            $response['fund_transfer'] = round(($user_wallet['fund_transfer']/$user_wallet['wallet'])*100,2);
        }
        else
        {
            $response['referral_per'] = 0 ;
            $response['level_per']    =0 ;
            $response['withdrawal_per'] = 0;
        }
        $response['user_wallet']=$user_wallet;
        $response['recent_referrals'] = $this->Dashboard_model->getRecentReferrals($user_id);
        $wallet=$this->Business_model->getUserWalletSum('wallet',log_user_id());
        $response['wallet'] = cur_format($wallet);
        
        if ($response) {
            $response['success'] = TRUE;
            $this->output
            ->set_status_header(200)
            ->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
            ->_display();
            exit();

        }
        else{
            $response['success'] = FALSE;
            $response['msg'] = 'Failed..! Please check the inputs';
            $this->set_session_flash_data( $response['msg'], $response['success']  );
            $this->output
            ->set_status_header(200)
            ->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
            ->_display();
            exit();

        }

    }


}


public function getMonthYear()
{
    if ($this->input->is_ajax_request()) {

        $month_year = array();
        $month_names = array();

        for($n=0;$n<12;$n++)
        {
            $month_year[$n]['value']=$n;

            $month_year[$n]['month']= date('m',strtotime(" - $n month"));
            $month_year[$n]['month_name']= date('M',strtotime(" - $n month"));
            $month_year[$n]['year']= date('Y',strtotime(" - $n month"));
            $month_year[$n]['date']= date('Y-m-d',strtotime(" - $n month"));
            $month_name =$month_year[$n]['month_name'].' '.$month_year[$n]['year'];
            $value[] = $n;
            $data[] = [ 'id' => $n , 'text' => $month_name];


        }

        echo json_encode($data);

    }

}


public function getMonthName()
{
  if ($this->input->is_ajax_request()) {

    $month_year = array();
    $month_names = array();

    for($n=0;$n<12;$n++)
    {
        $month_year[$n]['value']=$n;

        $month_year[$n]['month']= date('m',strtotime(" - $n month"));
        $month_year[$n]['month_name']= date('M',strtotime(" - $n month"));
        $month_year[$n]['year']= date('Y',strtotime(" - $n month"));
        $month_year[$n]['date']= date('Y-m-d',strtotime(" - $n month"));
        $month_name =$month_year[$n]['month_name'];
        $value[] = $n;
        $data[]=$month_name;


    }
    $response['names']=$data;
    $day_limit = ['01','04','08','12','16','20','24','28','31'];
    $i=0; 
    $j=0;

    foreach($month_year as $v)
    {
        for($j=0;$j<8;$j++)
        {

            $start_day=  $day_limit[$j];
            $end_day = $day_limit[$j+1];
            $month =  $month_year[$i]['month'];
            $year =  $month_year[$i]['year'];


            $datas[$i]=$this->Dashboard_model->getUserReferrals(log_user_id(),$month,$start_day,$end_day, $year);
            $total_referrals[$i][]=count($datas[$i]);


        }



        $i++;   
    }

    for($i=0,$j=1; $i<=11; $i++,$j++)
    {
        $response['m'.$j] = $total_referrals[$i];
    }

    echo json_encode($response);

}  
}
public function getTime() {
    $site_details = $this->Base_model->getCompanyInformation();
    $timezone = $site_details["time_zone"];
    date_default_timezone_set($timezone); 
    $server_time = date('Y-m-d H:i:s A');
    $response = array(
      'server_time' => $server_time
  );
    $this->output
    ->set_content_type('application/json')
    ->set_output(json_encode($response));
}


}
