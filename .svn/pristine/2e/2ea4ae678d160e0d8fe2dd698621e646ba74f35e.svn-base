<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Inventory_model extends Base_model {

    function __construct() {
        parent::__construct();
    }

    public function ProductCodeExist($product_id='',$product_code='')
    {

        $count = NULL;
        $this->db->select('product_name')
        ->from('product_details')
        ->where('product_code',$product_code);
        // ->where('id',$product_id);
        if ($product_id){
            $this->db->where('id !=',$product_id);
        }
        $count = $this->db->count_all_results();

        return $count; 


    }
    public function getDimensionCode($dimension_id){
        $code=NULL;
        $this->db->select('code');
        $this->db->from('dimensions');
        $this->db->where('id',$dimension_id); 
        $this->db->limit(1);
        $query = $this->db->get();
        foreach($query->result() as $row){
            $code = $row->code;
        }
        return $code;
    }
    public function getColorCode($color_id){
        $code=NULL;
        $this->db->select('code');
        $this->db->from('colors');
        $this->db->where('id',$color_id); 
        $this->db->limit(1);
        $query = $this->db->get();
        foreach($query->result() as $row){
            $code = $row->code;
        }
        return $code;
    }

    public function insertProductDetails($post_arr)
    {

        $this->db->set('product_name', $post_arr['product_name'])
        ->set('product_code', $post_arr['product_code'])
        ->set('description', $post_arr['description'])
        ->set('sort_order', $post_arr['sort_order'])
        ->set('category_id', $post_arr['category_id'])
        ->set('price', $post_arr['price'])
        ->set('slug_url',$post_arr['slug_url'])
        ->set('shipping_charge', $post_arr['shipping_charge'])
        ->set('strike_price', $post_arr['strike_price'])
        ->set('quantity', $post_arr['quantity']) 
        ->set('status', 'active')
        ->set('date_added', date('Y-m-d H:i:s'))
        ->set('color_id', $post_arr['color_id'])
        ->set('dimension_id', $post_arr['dimension_id']);
        
        if (element('image', $post_arr)) {
            $this->db->set( 'image',$post_arr['image']);
        }
        
        if (element('video_url', $post_arr)) {
            $this->db->set( 'video_url', $post_arr['video_url'] );
        }
        // if (element('offer_percentage', $post_arr)) {
        //     $this->db->set('offer_percentage', $post_arr['offer_percentage']);
        // }

        $res = $this->db->insert('product_details');
        return $this->db->insert_id();;
    }
    public function updateProductDetails($post_arr)
    {
        $this->db->set('product_name', $post_arr['product_name'])
        ->set('product_code', $post_arr['slug_url'])
        ->set('description', $post_arr['description'])
        ->set('sort_order', $post_arr['sort_order'])
        ->set('category_id', $post_arr['category_id'])
        ->set('slug_url',$post_arr['slug_url'])
        ->set('price', $post_arr['price'])
        ->set('shipping_charge', $post_arr['shipping_charge'])
        ->set('strike_price', $post_arr['strike_price'])
        ->set('quantity', $post_arr['quantity']) 
        ->set('status', 'active')
        ->set('color_id', $post_arr['color_id'])
        ->set('dimension_id', $post_arr['dimension_id'])

        ->set('product_code', $post_arr['product_code']);

        $this->db->where('id', $post_arr['id']);

        if (element('image', $post_arr)) {
            $this->db->set( 'image',$post_arr['image']);
        }
        $res = $this->db->update('product_details');
        return $res;
    }
    public function insertCategory($post_arr=[])
    {
        // print_r($post_arr);die();
        $this->db->set('category_name',$post_arr['category_name'])
        ->set('main_item_code',$post_arr['main_item_code'])
        ->set('sort_order',$post_arr['sort_order'])
        ->set('description',$post_arr['description'])
        ->set('slug',$post_arr['slug_url']);
        if(element('category',$post_arr)){
            $this->db->set('parent',$post_arr['category']);
        }
        $this->db->set('date', date('Y-m-d H:i:s'));
        $this->db->set('status', 'active');

        if( element('image', $post_arr) ){ 
            $this->db->set('image',$post_arr['image']);
        }

        $ins=$this->db->insert('category');
        return $ins;

    }
    public function updateCategory($post_arr='')
    {

        $this->db->set('category_name',$post_arr['category_name'])
        ->set('main_item_code',$post_arr['main_item_code'])
        ->set('sort_order',$post_arr['sort_order'])
        ->set('description',$post_arr['description'])
        ->set('update_date', date('Y-m-d H:i:s'))
        ->set('slug',$post_arr['slug_url'])
        ->where('id',$post_arr['id']);
        if(element('category',$post_arr)||$post_arr['category']==0){

            if($post_arr['category']==0)
            {
                $this->db->set('parent',0);
            }
            else{

                $this->db->set('parent',$post_arr['category']);
            }
        }
        if( element('image', $post_arr) ){ 
            $this->db->set('image',$post_arr['image']);
        }
        
        $ins=$this->db->update('category');

        return $ins;

    }


    public function getCategoryCount()
    {
        $this->db->select('id');
        $this->db->from('category');
        $count = $this->db->count_all_results();
        return $count;
    }

    public function getCategoryDetailsAjax($search_arr=[], $count = 0) {

        $details = array();
        $row = $search_arr['start'];
        $rowperpage = $search_arr['length'];


        $this->db->select('*')
        ->from('category');

        if(element('search',$search_arr)){
            $searchValue = $search_arr['search']['value'];
            if('' != $searchValue) { 
                $where = "(category_name LIKE '%$searchValue%')";
                $this->db->where($where);
            }
        }

        if(element('category_id',$search_arr)){
            $this->db->where('id', $search_arr['category_id']);
        }

        if(element('status',$search_arr)){
            $this->db->where('status', $search_arr['status']);
        }else{
            $this->db->where('status !=','deleted');
        }

        if($count) {
            return $this->db->count_all_results();
        }

        if ( element( 'order_by', $search_arr)) {
            $this->db->order_by( $search_arr['order_by'], 'DESC' );
        }else{
            $this->db->order_by('sort_order','ASC');
        }

        $this->db->limit($rowperpage, $row);
        $query = $this->db->get(); 
        // echo $this->db->last_query();
        $i=1;
        foreach($query->result_array() as $row)
        {
            $row['index'] =$search_arr['start']+$i;
            $row['enc_id'] = $this->Base_model->encrypt_decrypt( 'encrypt', $row['id'] );
            if($row['parent'] != 0){
                $row['parent_name'] = $this->Base_model->getCategoryName( $row['parent'] );
            } 
            $row['description'] = substr($row['description'],0, 100);  
            $details[] = $row;
            $i++;

        }
        return $details;

    }
    public function updatestatus($post_arr=[])
    {
        if($post_arr['status']=="inactive"){
            $this->db->set('status',"active");
        }else{
            $this->db->set('status',"inactive");

        }
        $this->db->where('id',$post_arr['id']);
        $ins=$this->db->update('category');
        // echo $this->db->last_query();die();
        return $ins;

    }
    public function getColorCount()
    {
        $this->db->select('id');
        $this->db->from('colors');
        $count = $this->db->count_all_results();
        return $count;
    }
    public function getColorDetailsAjax($search_arr=[], $count = 0) {

        $details = array();
        $row = $search_arr['start'];
        $rowperpage = $search_arr['length'];


        $this->db->select('*')
        ->from('colors');

        if(element('search',$search_arr)){
            $searchValue = $search_arr['search']['value'];
            if('' != $searchValue) { 
                $where = "(name LIKE '%$searchValue%' 
                OR code LIKE '%$searchValue%' 
                OR date LIKE '%$searchValue%')";
                $this->db->where($where);
            }
        }

        if(element('id',$search_arr)){
            $this->db->where('id', $search_arr['id']);
        }

        if(element('status',$search_arr)){
            $this->db->where('status', $search_arr['status']);
        }else{
            $this->db->where('status !=','deleted');
        }

        if($count) {
            return $this->db->count_all_results();
        }


        $this->db->limit($rowperpage, $row);
        $query = $this->db->get(); 
        // echo $this->db->last_query();
        $i=1;
        foreach($query->result_array() as $row)
        {
            $row['index'] =$search_arr['start']+$i;
            $row['enc_id'] = $this->Base_model->encrypt_decrypt( 'encrypt', $row['id'] );
            // $row['category']=$this->Base_model->getCategoryName($row['category']);
            $details[] = $row;
            $i++;

        }
        return $details;

    }

    public function insertColor($post_arr=[])
    {
        $this->db->set('name',$post_arr['name']);
        $this->db->set('code',$post_arr['code']);
        $this->db->set('color_code',$post_arr['color_code']);
        $this->db ->set('status',"active");
        $this->db->set('date', date('Y-m-d H:i:s'));
        $ins=$this->db->insert('colors');
        return $ins;

    }
    public function updateColor($post_arr=[])
    { 
        $this->db->set('name',$post_arr['name'])
        ->set('color_code',$post_arr['color_code'])
        ->set('code',$post_arr['code'])
        ->where('id',$post_arr['id']);
        $ins=$this->db->update('colors');
        return $ins;

    }
    public function updateColorstatus($post_arr=[])
    {
        if($post_arr['status']=="inactive"){
            $this->db->set('status',"active");
        }else{
            $this->db->set('status',"inactive");

        }
        $this->db->where('id',$post_arr['id']);
        $ins=$this->db->update('colors');
        return $ins;

    }

    public function getDimensionCount()
    {
        $this->db->select('id');
        $this->db->from('dimensions');
        $count = $this->db->count_all_results();
        return $count;
    }

    public function getDimensionDetailsAjax($search_arr=[], $count = 0) {

        $details = array();
        $row = $search_arr['start'];
        $rowperpage = $search_arr['length'];


        $this->db->select('*')
        ->from('dimensions');

        if(element('search',$search_arr)){
            $searchValue = $search_arr['search']['value'];
            if('' != $searchValue) { 
                $where = "(name LIKE '%$searchValue%')";
                $this->db->where($where);
            }
        }

        if(element('id',$search_arr)){
            $this->db->where('id', $search_arr['id']);
        }


        if($count) {
            return $this->db->count_all_results();
        }

        if ( element( 'order_by', $search_arr)) {
            $this->db->order_by( $search_arr['order_by'], 'DESC' );
        }else{
            $this->db->order_by('id','ASC');
        }

        $this->db->limit($rowperpage, $row);
        $query = $this->db->get(); 
        // echo $this->db->last_query();
        $i=1;
        foreach($query->result_array() as $row)
        {
            $row['index'] =$search_arr['start']+$i;
            $row['enc_id'] = $this->Base_model->encrypt_decrypt( 'encrypt', $row['id'] );
            $row['category_name'] = $this->Base_model->getCategoryName( $row['category_id'] );
            $details[] = $row;
            $i++;

        }
        return $details;

    }

    public function updateDimensionstatus($post_arr=[])
    {
        if($post_arr['status']=="no"){
            $this->db->set('status',"yes");
        }else{
            $this->db->set('status',"no");
        }
        $this->db->where('id',$post_arr['id']);
        $ins=$this->db->update('dimensions');
        return $ins;

    }


    public function insertDimension($post_arr=[])
    {
        // $curr_arr=$this->currency->currencies;
        // $site_info= $this->Base_model->getCompanyInformation();
        // $def_curr=$site_info['currency_id'];
        $this->db->set('name',$post_arr['name']);
        $this->db->set('code',$post_arr['code'])
        ->set('category_id',$post_arr['category_id'])
        ->set('status',$post_arr['status'])
        ->set('sort_order',$post_arr['sort_order'])
        ->set('date', date('Y-m-d H:i:s'));


        $ins=$this->db->insert('dimensions');
        $this->updatesortoder($post_arr['sort_order']);
        return $ins;

    }
    public function updateDimension($post_arr='')
    {
      // $curr_arr=$this->currency->currencies;
      // $site_info= $this->Base_model->getCompanyInformation();
      // $def_curr=$site_info['currency_id'];
      $this->db->set('name',$post_arr['name']);
      $this->db->set('code',$post_arr['code'])
      ->set('category_id',$post_arr['category_id'])
      ->set('status',$post_arr['status'])
      ->set('sort_order',$post_arr['sort_order'])
      ->set('date', date('Y-m-d H:i:s'))
      ->where('id',$post_arr['id']);

      $ins=$this->db->update('dimensions');
      $this->updatesortoder($post_arr['sort_order']);


      return $ins;

  }
  public function deleteDimension($id,$status)
  {
    $this->db->set('status',$status);
    $this->db->where('id',$id);

    $ins=$this->db->update('dimensions');
    return $ins;

}
public function updatesortoder($sort_order,$id="")
{
 $amt=1;
 $this->db->set('sort_order', 'sort_order + ' . $amt. '', FALSE);

 $this->db->where('sort_order >=',$sort_order);
 $ins=$this->db->update('dimensions');
 return $ins;

}

public function getAllCategory($search_arr=[] )
{
    $details=[];

    if ( element('parent', $search_arr)) {
        $this->db->where('parent',$search_arr['parent']); 
    }else{
        $this->db->where('parent',0);           
    }

    if ( element('status', $search_arr) !='all') {
        $this->db->where('status',$search_arr['status']); 
    }

    if ( element( 'id', $search_arr)) {
        $this->db->where( 'id', $search_arr['id'] );
    }

    if ( element( 'order', $search_arr)) {
        $this->db->order_by( $search_arr['order']['order_by'], $search_arr['order']['direction'] );
    }else{
        $this->db->order_by('sort_order','ASC');
    }

    $res=$this->db->select('id, category_name, parent, sort_order, date, image, slug,description')
    ->from('category')
    ->get();
    foreach ($res->result_array() as $row) { 
        $row['enc_id']=$this->encrypt_decrypt('encrypt',$row['id']);
        $search_arr = [
            'parent' => $row['id'], 
            'status' => 'active', 
        ];  
            // print_r($search_arr);
        $row['sub_categories'] = $this->getAllCategory( $search_arr );
        if ( element( 'id', $search_arr)) {
            return $row;
        }
        $details[$row['id']]=$row;
    }
    return $details;
}
public function getColorDetails(){
    $details=array();
    $this->db->select('*');
    $this->db->from('colors');
    $query=$this->db->get();
    foreach ($query->result_array() as $row) {
        $details[]=$row;
    }
    return $details;
}
public function getdimensionDetails($category_id=''){
    $details=array();

    $this->db->select('id,name');
    if($category_id)
        $this->db->where_in('category_id',$category_id);
    $this->db->where('status','yes');
    $this->db->from('dimensions');
    $query=$this->db->get();
    foreach ($query->result_array() as $row) {
        $details[]=$row;
    }
    return $details;
}

public function getProductCount()
{
    $this->db->select('id');
    $this->db->from('product_details');
    $count = $this->db->count_all_results();
    return $count;
}


public function getProductDetailsAjax($search_arr=[], $count = 0) {

    $details = array();
    $row = $search_arr['start'];
    $rowperpage = $search_arr['length'];


    $this->db->select('pd.*')
    ->from('product_details pd');

    if(element('search',$search_arr)){
        $searchValue = $search_arr['search']['value'];
        if('' != $searchValue) { 
            $where = "(pd.product_name LIKE '%$searchValue%')";
            $this->db->where($where);
        }
    } 
    if(element('product_id',$search_arr)){
        $this->db->where('pd.id', $search_arr['product_id']);
    }

    if(element('status',$search_arr)){
        $this->db->where('pd.status', $search_arr['status']);
    }else{
        $this->db->where('pd.status !=','deleted');
    }

    if($count) {
        return $this->db->count_all_results();
    }

    if ( element( 'order_by', $search_arr)) {
        $this->db->order_by( "pd.{$search_arr['order_by']}", 'DESC' );
    }else{
        $this->db->order_by('pd.id','DESC');
    }

    $this->db->limit($rowperpage, $row);
    $query = $this->db->get(); 
    $i=1;
    foreach($query->result_array() as $row)
    {
        $row['index'] =$search_arr['start']+$i;
        $row['enc_id'] = $this->Base_model->encrypt_decrypt( 'encrypt', $row['id'] );
        $row['category_name'] = $this->getCategoryName( $row['id'] );
        // $row['category_name'] = implode(', ', array_column($row['categories'], 'category_name'));
        $details[] = $row;
        $i++;

    }
    return $details;

}
public function insertAdditionalImages($product_id,$imgages) {
    foreach($imgages as $v){
        $this->db->set('product_id', $product_id);
        $this->db->set('image', $v);
        $this->db->set('date', date('Y-m-d H:i:s'));
        $res = $this->db->insert('product_images');
    }
    return $res;
}

public function RemoveproductImage($id)
{
    $this->db->where('id',$id);
    $res=$this->db->delete('product_images');
    return $res;
}

public function updateDefaultImage($id='',$img='')
{

    $this->db->set( 'image',$img);
    $this->db->where( 'id',$id);
    $res = $this->db->update('product_details');
    return $res;
}
public function ChangeProductstatus($post_arr=[])
{
    if($post_arr['status']=="inactive"){
        $this->db->set('status',"active");
    }else{
        $this->db->set('status',"inactive");

    }
    $this->db->where('id',$post_arr['id']);
    $ins=$this->db->update('product_details');
    return $ins;

}

public function getProductDetails($filter_params=array())
{
    $details = array();
    $this->db->select('pd.*')
    ->select('c.category_name')
    ->from('product_details pd')
    ->join('category c', 'c.id = pd.category_id', 'left');
    if(element('status', $filter_params))
        $this->db->where('pd.status', $filter_params['status']);
    if(element('id', $filter_params))
        $this->db->where('pd.id', $filter_params['id']);
    if( element('color', $filter_params) )
    {
        $where ="(";
        for($i=0;$i<count($filter_params['color'])-1;$i++)
        {
            $where .= "pd.color_id=".$filter_params['color'][$i]." OR ";
        }
        $where .="pd.color_id=".$filter_params['color'][$i].")";
        $this->db->where($where);
    }  if( element('category', $filter_params) )
    {
        $where ="(";
        for($i=0;$i<count($filter_params['category'])-1;$i++)
        {
            $where .= "pd.category_id=".$filter_params['category'][$i]." OR ";
        }
        $where .="pd.category_id=".$filter_params['category'][$i].")";
        $this->db->where($where);
    } if( element('dimension', $filter_params) )
    {
        $where ="(";
        for($i=0;$i<count($filter_params['dimension'])-1;$i++)
        {
            $where .= "pd.dimension_id=".$filter_params['dimension'][$i]." OR ";
        }
        $where .="pd.dimension_id=".$filter_params['dimension'][$i].")";
        $this->db->where($where);
    } 
    if(element("per_page",$filter_params)||element("page",$filter_params)){
        $this->db->limit($filter_params['per_page'], $filter_params['page']);

    }
    // if( element('category', $filter_params) )
    // {
    //     $where ="(";
    //     foreach($filter_params['category'] as $key=>$v)
    //     {
    //         if($v ==reset($filter_params['category']))
    //             $where .= 'find_in_set("'.$v.'", pd.category_id  )';
    //         else
    //             $where .= 'OR find_in_set("'.$v.'", pd.category_id ) ';
    //     }
    //     $where .=")";
    //     $this->db->where($where);
    //                     // $this->db->where_in('pd.category_id', $filter_params['category']);

    // } 
    // if(element('dimension', $filter_params))
    // {
    //     // $where ="(";
    //     // foreach($filter_params['dimension'] as $key=>$v)
    //     // {
    //     //     if($v!=' '){
    //     //     if($v ==reset($filter_params['dimension']))
    //     //         $where .= 'find_in_set("'.$v.'", pd.dimension_id )';
    //     //     else
    //     //         $where .= 'OR find_in_set("'.$v.'", pd.dimension_id) ';
    //     //     }
    //     // }
    //     // $where .=")";
    //                             $this->db->where_in('pd.dimension_id', $filter_params['dimension']);

    
    //     // $this->db->where($where);
    // } 

    if(element('category_id', $filter_params) > 0 ){
        $this->db->where('pc.category_id', $filter_params['category_id'])
        ->join('product_category pd', 'pd.product_id = pd.id', 'left')
        ->join('category c', 'c.id = pd.category_id', 'left');
    }

    if(element('search_text', $filter_params) > 0 )
        $this->db->where('pd.product_name', $filter_params['search_text']); 

    if(element('order_by', $filter_params) && element('order', $filter_params) )
        $this->db->order_by($filter_params['order_by'], $filter_params['order']); 

    if( element('start', $filter_params) && element('limit', $filter_params)  ){
        $this->db->limit($filter_params['limit'],$filter_params['start']);
    }else if( element('start_limit', $filter_params) && element('limit', $filter_params)  ){
        $this->db->limit($filter_params['limit'],$filter_params['start_limit']);
    }
    else if( !element('start', $filter_params) && element('limit', $filter_params) > 0 )
    {
        $this->db->limit($filter_params['limit']);
    }

    if(element("where",$filter_params)){
        foreach ($filter_params['where'] as $key => $value){
            $this->db->where("pd.".$key,$value);
        }
    }
    if(element("returnType",$filter_params) == 'count'){

        return $result = $this->db->count_all_results();
    }

    $query = $this->db->get();
    foreach($query->result_array() as $row)
    {
        $row['enc_product_id'] = $this->encrypt_decrypt('encrypt',$row['id']);
        $row['discount'] = $row['strike_price']-$row['price'];
        if($row['strike_price']!=0)
            $row['offer'] = ($row['discount']/$row['strike_price'])*100;
        $row['product_images']=$this->Base_model->getproductImages($row['id']);
        $row['description1']=Strip_tags($row['description']);
        $color_id=explode(',', $row['color_id']);
        $row['color_ids'] = $this->Inventory_model->getColorIdDetails($color_id);
        $dimension_id=explode(',', $row['dimension_id']);
        $row['dimension_ids'] = $this->Base_model->getDimensionNames($dimension_id);
        if(element('id', $filter_params))
        {
            return $row;
        }
        if( element( 'image', $row )){
            $img_path = './assets/images/products/'. $row['image'] ;
            if (!file_exists( $img_path)) {
                $row['image'] = 'default.png';
            } 
        }
        $details[] = $row;
    }
    return $details;
}

public function getCategoryIdFromSlug($slug)
{
    $id=NULL;
    $res=$this->db->select('id')
    ->from('category')
    ->where('slug',$slug)
    ->limit(1)
    ->get();
    foreach ($res->result() as $row) {
        return $row->id;
    }
}
public function getProductDetailsSimilarColor($id,$color_id,$main_item_code) {

    $data=[];
    $this->db->select('product_name,color_id');
    $this->db->from('product_details');
    $this->db->where('id !=',$id);
    $this->db->where('color_id !=',$color_id);
        // $this->db->where('main_item_code',$main_item_code);
    $this->db->limit(5);
    $query = $this->db->get(); 
    foreach ($query->result_array() as $row) {

        $row['color_name'] = $this->getColorName($row['color_id']);
        $data[] = $row;
    }

    return $data;
}
public function getProductDetailsSimilarSize($id,$dimension_id,$main_item_code) {

    $data=[];
    $this->db->select('product_name,dimension_id');
    $this->db->from('product_details');
    $this->db->where('id !=',$id);
    $this->db->where('dimension_id !=',$dimension_id);
        // $this->db->where('main_item_code',$main_item_code);
    $this->db->limit(5);
    $query = $this->db->get(); 
    foreach ($query->result_array() as $row) {
        $row['dimension_name'] = $this->getDimensionNameOnly($row['dimension_id']);
        $data[] = $row;
    }

    return $data;
}
    // public function getCategoryIds($product_id=''){
    //     $details=array();
    //     $this->db->select('product_id,category_id');
    //     $this->db->from('product_category');
    //     $this->db->where('product_id',$product_id);
    //     $this->db->where('status',1);
    //     $query=$this->db->get();
    //     foreach ($query->result_array() as $row) {
    //         $row['category_name']=$this->Base_model->getCategoryName($row['category_id']);
    //         $details[]=$row;

    //     }
    //     return $details;
    // }
public function getColorIdDetails($color_ids=[]){

    $details = array();
    $this->db->select('id,color_code');
    $this->db->from('colors');
    $this->db->where('status','active');
    $this->db->where_in('id' , $color_ids);
    $query = $this->db->get();
        // print_r($this->db->last_query());die();

    foreach($query->result_array() as $row){
        $details[$row['id']] = $row;

    }
    return $details;
}

// public function getOfferPercentage($id)
// {
//     $category_name=NULL;
//     $this->db->select('offer_percentage');
//     $this->db->from('offer');
//     $this->db->where('id',$id);
//     $this->db->limit(1);
//     $res=$this->db->get();
//     foreach ($res->result() as $row) {

//         return $row->offer_percentage;
//     }
// }
public function getDimensionNameOnly($id)
{
    $name=NULL;
    $def_currency=$this->session->userdata('default_currency');
    if($def_currency){
        $new_curr=$def_currency['currency_id'];
        $new_code=$def_currency['code'];
        $site_info= $this->Base_model->getCompanyInformation();
        $def_curr=$site_info['currency_id'];
        if($def_curr==$new_curr)
            $this->db->select('name');
        else
            $this->db->select(''.$new_code.' as name');
    }
    else{
        $this->db->select('id,name');
    }
    $this->db->from('dimensions');
    $this->db->where('id',$id);
    $this->db->limit(1);
    $res=$this->db->get();
    foreach ($res->result() as $row) {
        return $row->name;
    }
}


public function getColorName($id)
{
    $name=NULL;
    $this->db->select('name');
    $this->db->from('colors');
    $this->db->where('id',$id);
    $this->db->limit(1);
    $res=$this->db->get();
    foreach ($res->result() as $row) {
        return $row->name;
    }
}
public function getRequestProductDetails($product_id, $match_items= FALSE){

    $details = array();
    $this->db->select('pd.*')
    ->select('c.category_name')
    ->from('product_details pd')
    ->join('category c', 'c.id = pd.category_id', 'left')
    ->where('pd.id', $product_id)
    ->where_not_in('pd.status' , ['Deleted'])
    ->limit(1);
    $query = $this->db->get();
    foreach($query->result_array() as $row){
        $row['encrypt_id'] = $this->Base_model->encrypt_decrypt('encrypt', $product_id); 
        return $row; 
    }

    return $details;
}
public function getAllUserDetails($user_id=''){
    $details = array();
    $this->db->select('*');
    $this->db->from('user_info');
    if($user_id){
        $this->db->where('user_id' , $user_id);
    }
    $this->db->order_by('user_id' , 'DESC');
    $query = $this->db->get();
    foreach($query->result_array() as $row){
        $row['id'] = $this->Base_model->encrypt_decrypt('encrypt', $row['user_id']);
        $row['join_date'] = date('Y-m-d' , strtotime($row['date_of_joining']));
        $row['request_id'] = $row['user_id'];
        if($user_id){
            return $row;
        }
        $details[] = $row;
    }
    return $details;
}
public function getAvailableAddress($user_id='',$user_type='',$id='')
{ 
    $details = array();

    $this->db->select('*');
    $this->db->select('CONCAT(first_name, "  , ", address,",",email ) AS select_address', FALSE);
    $this->db->from('address');
    if($user_id)
        $this->db->where('user_id', $user_id);
    if($user_type)
        $this->db->where('user_type', $user_type);
    if($id)
        $this->db->where('id', $id);

    $query = $this->db->get();
    foreach ($query->result_array() as $row ) 
    {
        if($id){
            return $row;
        }
        $details[] = $row;        
    }
    return $details;
}
public function insertAddress($details) {
    $this->db->set( 'user_id', log_user_id() ); 
    $this ->db ->set('email',$details['email']);
    $this ->db ->set('first_name',$details['first_name']);
    if(element('last_name',$details))
        $this ->db ->set('second_name',$details['last_name']);
    if(element('phone',$details))
        $this ->db ->set('mobile',$details['phone']);
    if(element('city',$details))            
        $this ->db ->set('city',$details['city']);
    if(element('state',$details))
        $this ->db ->set('state',$details['state']);    
    if(element('address',$details))
        $this ->db ->set('address',$details['address']);
    if(element('pin_code',$details))
        $this ->db ->set('zip_code',$details['pin_code']);
    if(element('city',$details))
        $this ->db ->set('city',$details['city']);
    if(element('type',$details))
        $this ->db ->set('type',$details['type']);
    if(element('district',$details))
        $this ->db ->set('district',$details['district']);
    $this->db->insert( 'address' );
    $address_id = $this->db->insert_id();
    return $address_id;
}
public function updateUserAddress($details,$user_id){ 
   $this->db->set( 'user_id', log_user_id() ); 
   $this ->db ->set('email',$details['email']);
   $this ->db ->set('first_name',$details['first_name']);
   if(element('last_name',$details))
    $this ->db ->set('second_name',$details['last_name']);
if(element('phone',$details))
    $this ->db ->set('mobile',$details['phone']);
if(element('city',$details))            
    $this ->db ->set('city',$details['city']);
if(element('state',$details))
    $this ->db ->set('state',$details['state']);    
if(element('address',$details))
    $this ->db ->set('address',$details['address']);
if(element('pin_code',$details))
    $this ->db ->set('zip_code',$details['pin_code']);
if(element('city',$details))
    $this ->db ->set('city',$details['city']);
if(element('type',$details))
    $this ->db ->set('type',$details['type']);
if(element('district',$details))
    $this ->db ->set('district',$details['district']);
$this->db->where('user_id',$user_id);
$this->db->limit(1);
$result = $this ->db ->update('address');
return $result;
}

public function insertPaymentRequest($user_id,$amount,$data,$pay_order_id=0,$order_id=0)
{
// print_r('insertPaymentRequest');die();
    $this->db->set('user_id',$user_id);
    $this->db->set('amount',$amount);
    // $this->db->set('discount',$data['discount']);
    $this->db->set('payment_order_id',$pay_order_id);
    $this->db->set('date',date('Y-m-d'));
    $this->db->set('details',serialize($data));
    $this->db->set('order_id',$order_id);
    $res=$this->db->insert('payment_request');
// print_r($this->db->insert_id());die();
    return $this->db->insert_id();
// echo $this->db->last_query();die();

}

public function insertStripeRequest($user_id, $data)
{
    $res=$this->db->set('user_id',$user_id)
    ->set('data',json_encode($data))
    ->set('date', date('Y-m-d H:i:s'))
    ->insert('stripe_payment_request'); 
    return $this->db->insert_id();

}



public function placeOrder($user_id, $details, $total, $customer_type,$address_id,$discount=0,$shipping=0,$payment_method='',$product_details='')
{
// print_r($details);die();
    $final_amount = $total+$shipping-$discount;
    $date=date('Y-m-d H:i:s');
    $this->db->set('customer_id',$user_id);
    $this->db->set('customer_type',$customer_type);
    $this->db->set('total_amount',$total);
    $this->db->set('final_amount',$final_amount);
    $this->db->set('order_date',$date);
    $this->db->set('shipping_charge',$shipping);
    $this->db->set('discount',$discount);
    $this->db->set('address_id',$address_id);
    if($payment_method)
        $this->db->set('payment_type',$payment_method);
    $this->db->set('status','Pending');
    $this->db->insert("order_details");  
    $orderid=$this->db->insert_id();
    if($orderid){
        $ins_id=$this->placeOrderDetails($orderid, $details, $total);
        $update=$this->updateProductFromProductDetails($details);
    }


    $return_data['status'] = true;

    return  $orderid;

}
public function updateProductFromProductDetails($details)
{ 
    // print_r($details);die();
    foreach ($details as $key => $row) {
        $qty=$row['qty'];
        $this->db->set("quantity", "quantity-$qty",false);
        $this->db->where('id', $row['id']);
        $this->db->update("product_details"); 
    }
    return TRUE;

}
public function insertCheckoutOrders($total ,$status,$user_id,$cart_contents)
{
        // print_r('insertCheckoutOrders');die();
    $this->db->set('customer_id',$user_id);
    $this->db->set('total_amount',$total);
    $this->db->set('date',date('Y-m-d'));
    $this->db->set('status',$status);

    $this->db->set('cart_data',serialize($cart_contents));
    $res=$this->db->insert('checkout_orders');
            // print_r($total);die();
    return $this->db->insert_id();
}

public function getOrderDetails($order_id)
{
    $this->db->select('opd.*');
    $this->db->select('od.*');
    $this->db->from('order_product_details as opd');
    $this->db->join('order_details as od','od.order_id=opd.order_id','LEFT');
    $this->db->where('opd.order_id',$order_id);

    $query=$this->db->get();
    $details = [];
    foreach ($query->result_array() as $row) {

        $row['enc_id']= $this->Base_model->encrypt_decrypt('encrypt', $row['product_id']);
        $row['product_name'] = $this->IdToProductName('product_name',$row['product_id']);
        $row['image'] = $this->IdToProductName('image',$row['product_id']);
        $details[]=$row;
    }
    return $details;


} 


public function getOrderDetailsUser($user_id='',$order_status='all', $from_date='', $to_date='', $limit='', $start=0) {

    $data=[];
    $this->db->select('od.*');
    $this->db->from('order_details od');


    if($order_status!='all') {

        $this->db->where('od.status',$order_status);

    }
    if ($user_id) {
        $this->db->where('od.customer_id', $user_id);
    }
    if($from_date) {
        $from_date = date("Y-m-d 00:00:00", strtotime($from_date));
        $this->db->where('od.order_date >=', $from_date);
    }
    if($to_date) {
        $to_date = date("Y-m-d 23:59:59", strtotime($to_date)); 
        $this->db->where('od.order_date <=', $to_date);
    }
    if($limit) {
        $this->db->limit($limit, $start);
    }

    $this->db->order_by('od.order_id','DESC');

    $res = $this->db->get();

    foreach ($res->result_array() as $row) {
        $row['user_name'] = $this->Base_model->getUserName($row['customer_id']);
        $row['full_name'] = $this->Base_model->getFullName($row['customer_id']);
        $row['encrypt_id'] = $this->Base_model->encrypt_decrypt('encrypt',$row['order_id']);
        $data[] = $row;
    }

    return $data;
} 
public function getAddressDetails($address_id)
{
    $this->load->model('Zone_model');
    $details =[];
    $this->db->select('*');
    $this->db->from('address');
    $this->db->where('id', $address_id);
    $query = $this->db->get();
    foreach($query->result_array() as $row){
        $row['country_name'] = $this->Zone_model->IdToCountryName($row['country']);
        return $row;
    }
    return $details;
}
public function placeOrderDetails($order_id, $details, $total)
{

    foreach ($details as $key => $row) {
        $this->db->set('order_id', $order_id);
        $this->db->set('product_id', $row['id']);
        $this->db->set('quantity', $row['qty']);
        $this->db->set('amount', $row['price']);
        $this->db->set('subtotal', $row['subtotal']);
        $this->db->set('color', $row['options']['color']);
        $this->db->set('dimension', $row['options']['size']);
        $this->db->insert("order_product_details"); 

    }
    return $this->db->insert_id();

} 
public function IdToProductName($field_name,$product_id) {
    $product_name = NULL;
    $this->db->select($field_name);
    $this->db->from('product_details');
    $this->db->where('id', $product_id);
    $this->db->limit(1);
    $query = $this->db->get();
    foreach ($query->result() as $row) {
        $product_name = $row->$field_name;
    }
    return $product_name;
}

public function getOrderInfo($user_id)
{ 
    $details = [];
    $this->db->select('*'); 
    $this->db->from('order_details');
    $this->db->where('order_id',$user_id);
    $this->db->order_by('order_date','DESC');
    $query=$this->db->get();
    $details = [];

    foreach ($query->result_array() as $row) {

        $row['return_date'] = date('Y-m-d H:i:s', strtotime('+7 days', strtotime($row['delivery_date'])));
        $row['today']=date('Y-m-d H:i:s');


        $row['enc_id'] = $this->Base_model->encrypt_decrypt('encrypt', $row['order_id']);
        $row['products'] = $this->getOrderProducts($row['order_id']);
        $details[]=$row;
    }

    return $details;
}

public function getOrderProducts($order_id)
{
    $this->db->select('opd.*');
    $this->db->select('pd.product_name, pd.image,pd.description');
    $this->db->from('order_product_details as opd');
    $this->db->join('product_details as pd','pd.id = opd.product_id');
    $this->db->where('opd.order_id',$order_id);
    $query=$this->db->get(); 
    $details = [];
    foreach ($query->result_array() as $row) {
        $row['description'] = substr($row['description'], 0, 236);  
        $details[]=$row;
    }
    return $details;
}

function updateQty($qty,$product_id){

    $this->db->set('quantity', 'quantity + ' . $qty, FALSE);
    $this->db->where('id', $product_id);
    $res = $this->db->update('product_details');
    return $res;
}

function updateNotificationStatus($post_arr=[]){

    $this->db->set('cancelled',$post_arr['status']);
    $this->db->set('cancelled_qty',$post_arr['quantity']);
    $this->db->set('cancelled_reason',$post_arr['reason']);
    $this->db->where('order_id', $post['id']);
    $res = $this->db->update('order_product_details');
    return $res;
}

function updateOrderStatus($post=[]){

    $this->db->set('status',$post['status'])
    ->set('order_change_date',date('Y-m-d H:i:s'));

    if (element('reason',$post)) {
        $this->db->set('return_reason',NULL);
    }

    $this->db->where('order_id', $post['id']);
    $res = $this->db->update('order_details');
    return $res;
}

function updateOrderStatusAdmin($order_id, $order_status=1){



    $this->db->set('status',$order_status);
    if($order_status=='Delivered'){
        $this->db->set('delivery_date',date('Y-m-d H:i:s'));
    }
    $this->db->where('order_id', $order_id);
    $res = $this->db->update('order_details');

    return $res;
}

function updateOrderProof($order_id, $proof,$cmt=''){

    $this->db->set('proof',$proof);
    if($cmt)
        $this->db->set('comment',$cmt);
    $this->db->where('order_id', $order_id);
    $res = $this->db->update('order_details');
    return $res;
}


function updateOrderStatusUser($post=[]){

    $this->db->set('status',$post['status'])
    ->set('order_change_date',date('Y-m-d H:i:s'));
    if (element('reason',$post)) {
        $this->db->set('return_reason',$post['reason']);
    }
    $this->db->where('order_id', $post['id']);
    $res = $this->db->update('order_details');
    return $res;
}

public function getOrderDetailsajaxCount($order_status,$user_id='')
{
    $count = 0 ;
    $this->db->select('*');
    $this->db->from('order_details');
    if($order_status != 'all')
    {
        $this->db->where('status',$order_status);
    }
    if($user_id)
    {
        $this->db->where('customer_id',$user_id);
    }

    $count = $this->db->count_all_results();
    return $count;
}

public function getOrderDetailsAjax($post_arr=[],$count=0)
{
    $row = $post_arr['start'];
    $rowperpage = $post_arr['length'];
    $details = array();
    $this->db->select('od.*');
    // $this->db->select('cod.added_date as dates');
    $this->db->from('order_details od');
    // $this->db->join('cod_users_repurchase cod','cod.id=od.ref_id');
    $this->db->order_by('od.delivery_date','DESC');


    if(element('user_id',$post_arr))
    {
        $this->db->where('od.customer_id',$post_arr['user_id']);
    }if(element('user_ids',$post_arr))
    {
        $this->db->where('od.customer_id',$post_arr['user_ids']);
    }
    if( element('from_date',$post_arr) ){
        $from_date = date("Y-m-d 00:00:00", strtotime($post_arr['from_date'])); 
        $this->db->where('od.order_date >=', $from_date); 
    }
    if( element('end_date',$post_arr) ){ 
        $end_date = date("Y-m-d 23:59:59", strtotime($post_arr['end_date']));  
        $this->db->where('od.order_date <=', $end_date);
    }
    if( element('order_status',$post_arr) )
    {
        if($post_arr['order_status'] != 'all')
        {
            $this->db->where('od.status',$post_arr['order_status']);
        }


    }
    $searchValue = element('search', $post_arr) ? (element('value', $post_arr['search'] ) ? $post_arr['search']['value']: FALSE ): FALSE;
    if($searchValue) { 

        $where = "(od.status LIKE '%$searchValue%' 
        OR od.order_date LIKE '%$searchValue%' 
        OR od.total_point LIKE '%$searchValue%'
        OR od.order_id LIKE '%$searchValue%'

    )";

    $this->db->where($where);
}

$this->db->order_by('order_id','DESC');

if($count) {
    return $this->db->count_all_results();
}

$this->db->limit($rowperpage, $row);
$query = $this->db->get();
$i=1;
// echo $this->db->last_query();die();
foreach($query->result_array() as $row){ 

    $row['index'] = $post_arr['start']+$i++;
    $row['user_name'] = $this->Base_model->getUserName($row['customer_id']);
    $row['full_name'] = $this->Base_model->getFullName($row['customer_id']);
    $row['order_date'] =date("d-m-Y", strtotime($row['order_date']));
    $row['date'] =date("d-m-Y", strtotime($row['delivery_date']));
    $row['transaction_no'] =$row['order_id'];
    // $row['payment_proof'] =$row['proof'];
    $row['encrypt_id'] = $this->Base_model->encrypt_decrypt('encrypt',$row['order_id']);
    $row['cur_total_amount'] = cur_format($row['total_amount']);
    $details[] = $row;
}
return $details;
} 

 public function deleteColor($id)
 {
    $this->db->where('id',$id);
    $result=$this->db->delete('colors');
     //echo $this->db->last_query();
    return $result;
 }

 public function deleteProduct($id)
 {
    $this->db->where('id',$id);
    $result=$this->db->delete('product_details');
     //echo $this->db->last_query();
    return $result;
 }
 public function deleteDimensionList($id)
 {
    $this->db->where('id',$id);
    $result=$this->db->delete('dimensions');
     //echo $this->db->last_query();
    return $result;
 }

 public function deleteCategory($id)
 {
    $this->db->where('id',$id);
    $result=$this->db->delete('category');
     //echo $this->db->last_query();
    return $result;
 }

}


