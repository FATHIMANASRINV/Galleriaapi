<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Business extends Base_Controller {

	function __construct()
	{
		parent::__construct(); 	
	}
	

	function user_account_details()
	{
		$show_status = FALSE;
		$account_details = array();

		$user_id = $this->input->get('user_id');
		if(!isset($user_id)){
			$user_id = log_user_id(); 
		}
		else{
			$user_id = $this->Base_model->encrypt_decrypt('decrypt',$user_id);
		}
		$user_name = $this->Base_model->getUserName($user_id);
		if($this->input->post('view_details') && $this->validate_user_account())
		{
			$show_status = TRUE;
			$post_arr = $this->input->post(); 
			$user_name = $post_arr['user_name'];
			$user_id = $this->Base_model->getUserId($user_name);
			if(!$user_id)
			{
				$msg = lang('text_invalid_user_name');
				$this->redirect($msg, 'business/user-account-details', FALSE);
			}
			$user_name = $post_arr['user_name'];
			$category_id = $post_arr['category'];
			$category_name = $this->Base_model->getAmountTypeName($category_id);
			$account_details = $this->Business_model->getAccountDetails($user_id, $category_id);
			$user_total_amount = $account_details["user_total_amount"];
			unset($account_details["user_total_amount"]);
			$data['category_id'] = $category_id;
			$data['user_total_amount'] = $user_total_amount;
			
		}
		$category_details = array();
		$category_details = $this->Business_model->getCategoryDetails(); 
		$data['title'] = lang('text_user_account_details');
		$data['show_status'] = $show_status;
		$data['account_details'] = $account_details;
		$data['category_details'] = $category_details;
		$data['user_id'] = $user_id;
		$data['user_name'] = $user_name;
		$this->loadView($data);

	}

	function validate_user_account()
	{
		$this->form_validation->set_rules('user_name', lang('text_user'), 'trim|required'); 
		$this->form_validation->set_rules('category', lang('text_category'), 'trim|required');
		$this->form_validation->set_error_delimiters("<div style='color:#b94a48;'>", '</div>');
		$this->form_validation->set_message('alpha_dash_space', lang('characters_only'));
		$validation_result = $this->form_validation->run();

		return $validation_result;
	}

	public function wallets_summary() {

		$data['title'] = lang('wallet_summary');

		$user_id = log_user_id();

		$this->load->model('Dashboard_model');
		$user_wallet = $this->Dashboard_model->getUserWalletDetails($user_id);
		$data['credit']=$user_wallet['referral_bonus']+$user_wallet['level_bonus']+$user_wallet['add_fund']+$user_wallet['rank_bonus'];
		$data['debit']=abs($user_wallet['wallet_withdrawal'])+abs($user_wallet['ewallet_register'])+abs($user_wallet['deduct_fund'])+abs($user_wallet['fund_transfer'])+abs($user_wallet['payout_request']);
		$data['user_wallet']=$user_wallet;

		$this->loadView($data);
	}

	function fund_transfer($enc_id='')
	{ 

		$user_name = log_user_name();
		$user_id = log_user_id();
		if($enc_id){
			
			$req_id = $this->Base_model->encrypt_decrypt('decrypt',$enc_id);
			$data['id']=$req_id;
			$data['user']=$this->Base_model->getUserName($req_id);
			
		}

		$this->load->model('Signup_model');
		$enc_id=$this->Base_model->encrypt_decrypt('encrypt',$user_id);
	
		$codeContents = '192.168.1.35/WORKS/Matrix-demo/user/business/fund-transfer/'.$enc_id;
		$qr_code = $this->Signup_model->generateQRcode($codeContents,$user_name);
		
		$data['qr_code']=$qr_code;
		
		if($this->input->post('send') && $this->validate_transfer())
		{
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "business/fund_transfer", FALSE);

			}
			$post_arr = $this->input->post();
			$from_id = $user_id;
			$from_name = $user_name;
			
			$to_userid =$this->Base_model->getUserId($post_arr["to_user"]);
			$to_name = $post_arr["to_user"];
			$total_amount = $post_arr["amount"];

			$security_pass = $post_arr["security_pin"]; 
			$current_balance = $this->Base_model->getUserWallet($from_id);

			if( $total_amount > $current_balance )
			{
				$msg = lang("text_invalid_amount");
				$this->redirect($msg, "business/fund_transfer", FALSE);
			}
			else if(!$this->Business_model->isSecurePinValid($user_id,$security_pass))
				
			{
				$msg = lang("text_invalid_security_pass");
				$this->redirect($msg, "business/fund_transfer", FALSE);
			}

			$date_of_submission = date('Y-m-d H:i:s');
			$this->Business_model->begin();
			$this->load->model('Calculation_model');

			$comm = [
				'user_id' => $to_userid,
				'total_amount' => $total_amount,
				'date_of_submission' => $date_of_submission,
				'from_id' => $from_id,
				'transaction_note' => $post_arr['trans_note'],
				'fund_transfer_type' => 'credit',
			];

			$amount_added=$this->Calculation_model->insertCommissionDetails( $comm,'fund_transfer','fund_transfer');


			$comm = [
				'user_id' => $from_id,
				'total_amount' => -$total_amount,
				'date_of_submission' => $date_of_submission,
				'from_id' => $to_userid,
				'transaction_note' => $post_arr['trans_note'],
				'fund_transfer_type' => 'debit',
			];
			$amount_deducted = $this->Calculation_model->insertCommissionDetails( $comm,'fund_transfer','fund_transfer'); 


			if ($amount_added && $amount_deducted) {
				$this->Business_model->commit();

				$this->Base_model->insertIntoActivityHistory( $to_userid, $from_id, 'fund_transfer_to', serialize($post_arr), $total_amount );                       
				$msg = lang('fund_transfered_successfully');
				$this->redirect($msg, 'business/fund_transfer', TRUE);

			} else {
				$this->Business_model->rollback();
				$msg = lang('error_on_fund_transferring');
				$this->redirect($msg, 'business/fund_transfer', FALSE);
			}
		}

		$data['user_name'] = $user_name;
		$data['user_id'] = $user_id;


		$data['title'] = lang('fund_transfer');
		$this->loadView($data);
	}
	public function validate_transfer() {
		$this->form_validation->set_rules('from_user', lang('from_user'), 'required|is_exist[user_info.user_name]');
		$this->form_validation->set_rules('to_user', lang('to_user'), 'required|is_exist[user_info.user_name]|differs[from_user]');
		$this->form_validation->set_rules('amount', lang('amount'), 'required|greater_than[0]');
		$this->form_validation->set_rules('security_pin', lang('security_pin'), 'required');

		$result =  $this->form_validation->run();
		return $result;
	}

	public function payout_request()
	{ 
		$user_name = log_user_name();
		$user_id = log_user_id();

		$max_amt = value_by_key('max_withdraw_amt');
		$min_amt = value_by_key('min_withdraw_amt');
		$transaction_fee = value_by_key('transaction_fee');

		$current_balance = $this->Base_model->getUserWallet($user_id);
		$payout=$this->Business_model->getPayoutRequests($user_id);


		if($this->input->post('request') && $this->validate_payout_request())
		{
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "business/payout_request", FALSE);

			}
			$post_arr = $this->input->post();

			$amount = $post_arr['amount'];
			$security_pass = $post_arr["security_pin"];
			$total_amount =$amount;

			$this->load->model('Calculation_model');
			if( $total_amount > $current_balance | $amount < $min_amt | $amount > $max_amt)
			{
				$msg = lang("text_invalid_amount");
				$this->redirect($msg, "business/payout_request", FALSE);
			}
			else if(!$this->Business_model->isSecurePinValid($user_id,$security_pass))

			{
				$msg = lang("text_invalid_security_pass");
				$this->redirect($msg, "business/payout_request", FALSE);
			}

			foreach ($payout as $v){  
				if($v['status'] == 'pending')
				{
					$msg = lang('already_have_a_pending_request');
					$this->redirect($msg, "business/payout_request", FALSE);
				}
			}


			$this->Business_model->begin();

			$result = $this->Business_model->insertPayoutRequest($user_id,$amount,$transaction_fee,'wallet') ;

			$comm = [
				'user_id' => $user_id,
				'total_amount' => -$total_amount,
				'date_of_submission' => date('Y-m-d H:i:s'),
				'from_id' => $user_id,
				'transaction_note' => 'payout_request',
				'fund_transfer_type' => 'debit',
			];
			$up_date = $this->Calculation_model->insertCommissionDetails( $comm,'payout_fund','payout_request'); 

			if($result && $up_date)
			{
				$this->Business_model->commit();
				$this->Base_model->insertIntoActivityHistory( '', $user_id, 'payout_requested', serialize($comm), $total_amount );     
				$msg = lang("payout_requested_success");
				$this->redirect($msg, "business/payout_request", TRUE);

			}
			else
			{
				$this->Business_model->rollback();

				$msg = lang("payout_requested_error");
				$this->redirect($msg, "business/payout_request", FALSE);
			}

		}

		$requests = $this->Business_model->getPayoutRequests($user_id);
		$data['requests'] = $requests;

		$data['max_amt'] = $max_amt;
		$data['min_amt'] = $min_amt;
		$data['transaction_fee'] = $transaction_fee;
		$data['current_balance'] = $current_balance;
		$data['user_name'] = $user_name;
		$data['user_id'] = $user_id;

		$data['title'] = lang('payout_request');
		$this->loadView($data);



	}


	public function validate_payout_request() {

		$transction_fee = value_by_key('transaction_fee');
		$max = value_by_key('max_withdraw_amt') +  $transction_fee ;
		$min = value_by_key('min_withdraw_amt');

		$this->form_validation->set_rules('amount', lang('amount'), 'required|numeric');
		$this->form_validation->set_rules('security_pin', lang('security_pin'), 'required');

		$result =  $this->form_validation->run();
		return $result;
	}
	
	public function product_list(){

		$data['title'] = lang('dashboard');  
		$this->loadView($data);
	}
	public function product_details(){

		$data['title'] = lang('dashboard');  
		$this->loadView($data);
	}
	public function checkout(){

		$data['title'] = lang('checkout');  
		$this->loadView($data);
	}
	public function order_details(){

		$data['title'] = lang('order details');  
		$this->loadView($data);
	}
	public function invoice(){

		$data['title'] = lang('invoice');  
		$this->loadView($data);
	}
	
	function get_username() {

		if($this->input->is_ajax_request()){
			$post = $this->input->post();

			$result = $this->Base_model->getUserName($post['user_id']);
			
			echo $result;
		}
	}
}
