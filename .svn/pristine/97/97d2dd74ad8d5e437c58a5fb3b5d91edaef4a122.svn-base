<?php defined('BASEPATH') OR exit('No direct script access allowed');
include_once './libs/phpqrcode/qrlib.php';
class Member extends Base_Controller {

	function __construct()
	{
		parent::__construct(); 	
	}
	
	function profile($url_id='')
	{ 
		if($this->input->get('user_id'))
		{
			$encoded_user_id =  $this->input->get('user_id');
			// print_r($encoded_user_id);die();
			$user_id = $this->Base_model->encrypt_decrypt('decrypt', $encoded_user_id);
			$user_name = $this->Base_model->getUserName($user_id);
		}
		elseif($this->input->post_get('user_name'))
		{ 
			$user_name =  $this->input->post_get('user_name'); 
			$user_id = $this->Base_model->getUserId($user_name);
		}
		elseif( $this->input->post( 'user_id' ) ){

			$user_id =  $this->input->post('user_id'); 
			$user_name = $this->Base_model->getUserName($user_id);  
			if (!$user_id) { 
				$msg = lang('text_invalid_user_name');
				$this->redirect($msg, 'member/profile', FALSE);
			}

		}else
		{ 
			$user_id = log_user_id();
			$user_name = log_user_name();
		} 
		if(isset($user_name)){
			$tempDir = './assets/images/qrcode/';  
			$codeContents = htmlentities(base_url('referral/'."$user_name"));
			QRcode::png($codeContents, $tempDir.''.$user_name.'.png', QR_ECLEVEL_L, 5); 
		}
		if($this->input->post('profile_update') && $this->validate_profile_update())
		{ 
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "member/profile", FALSE);

			}
			$post_arr = $this->input->post();

			if($_FILES['userfile']['error'] != 4)
			{
				$config['upload_path'] = './assets/images/profile/';
				$config['allowed_types'] = 'gif|jpg|png|jpeg';
				$config['max_size'] = '10000';
				$config['remove_spaces'] = true;
				$config['overwrite'] = false;
				$config['encrypt_name'] = TRUE;

				$this->load->library('upload', $config);
				$msg = '';
				if (!$this->upload->do_upload()) {
					$msg = lang('logo_not_selected');
					$error = $this->upload->display_errors();
					$this->redirect( $error, "member/profile?user_name=$user_name", false );
				} else {
					$logo_arr = $this->upload->data();  
					$post_arr['file_name'] = $logo_arr['file_name'];

				}
			}

			$update_profile =  $this->Member_model->updateUserProfile( $post_arr, $user_id );
			if($update_profile){
				
				// if($this->data['user_details']['user_photo'] != 'nophoto.png'){
				// 	$old_profile = $config['upload_path'].$this->data['user_details']['user_photo'];
				// 	unlink($old_profile);
				// }  
				$this->redirect(lang("success_profile_updation"), "member/profile?user_name={$user_name}", TRUE);
			}
			else{
				$this->redirect(lang("failed_profile_updating"), "member/profile?user_name={$user_name}", FALSE);
			}
		}
		if($this->input->post('psw_update') && $this->validate_update_password($user_name))
		{ 
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "member/profile", FALSE);

			}
			$post_arr = $this->input->post();
			
			$this->config->load('bcrypt');
			$this->load->library('bcrypt');
			$hashed_password = $this->bcrypt->hash_password( $post_arr['new_password'] );
			if($this->Member_model->updatePassword(  $hashed_password, $user_id )){
				$this->redirect(lang('password_updated_successfully'), "member/profile?user_name={$user_name}", TRUE);
			}else{
				$this->redirect(lang('password_updation_failed'), "member/profile?user_name={$user_name}", FALSE);
			}
		}

		if($this->input->post('active') &&  log_user_name() != $user_name)
		{ 
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "member/profile", FALSE);

			}
			$post_arr = $this->input->post();
			$current_status = $this->Member_model->updateStatus($user_id);
			if($current_status){
				$this->Base_model->insertIntoActivityHistory($user_id, log_user_id(), 'activated_updated',serialize($post_arr));
				$msg = lang("activated_successfully");
				$this->redirect($msg, 'member/profile', True);

			}else{
				$msg = lang('failed');
				$this->redirect($msg, 'member/profile', false);
			}
		}

		if($this->input->post('inactive') &&  log_user_name() != $user_name)
		{ 
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "member/profile", FALSE);

			}
			$post_arr = $this->input->post();
			$current_status = $this->Member_model->updateStatusinactive($user_id);
			if($current_status){
				$this->Base_model->insertIntoActivityHistory($user_id, log_user_id(), 'inactivated_updated',serialize($post_arr));
				$msg =  lang("inactivated_successfully");
				$this->redirect($msg, 'member/profile', True);
			}else{
				$msg = lang('failed');
				$this->redirect($msg, 'member/profile', false);
			}

		}
		if(log_user_id() != $user_id){
			$select_arr = ['user_name','first_name', 'second_name', 'user_photo', 'email', 'country', 'city','state','zip_code', 'address', 'facebook', 'twitter','mobile','status','rank_id'];
			$user_details = $this->Base_model->getUserDetails($user_id, $select_arr );
		// print_r($user_details);die();
			$data[ 'user_details' ] = $user_details;    

		}
		$data['title'] = lang('profile'); 
		$data['user_name'] = $user_name;
		$data['user_id'] = $user_id;

		$this->loadView($data);
	}

	function validate_update_password($user_name) {
		$password_length_min = value_by_key('password_min_len');
		$password_length_max = value_by_key('password_max_len');

		$this->form_validation->set_rules('new_password', lang('new_password'), 'required|min_length['. $password_length_min .']|max_length['.$password_length_max.']|differs[old_password]|alpha_numeric');
		$this->form_validation->set_rules('confirm_password', lang('confirm_password'), 'required|min_length['. $password_length_min .']|max_length['.$password_length_max.']|matches[new_password]');
		$result =  $this->form_validation->run();

		return $result;
	}

	function validate_profile_update()
	{
		$len_mob = value_by_key("phone_number_length");
		$this->form_validation->set_rules('first_name', lang('firstname'), 'trim|required');
		$this->form_validation->set_rules('second_name', lang('lastname'), 'trim|required');
		$this->form_validation->set_rules('email', lang('email'), 'trim|required|valid_email');
		$this->form_validation->set_rules('mobile', lang('mobile'), 'required|min_length['.$len_mob.']|max_length['.$len_mob.']|numeric');
		$this->form_validation->set_rules('address', lang('address'), 'trim|required');
		$this->form_validation->set_rules('city', lang('city'), 'trim|required');

		$this->form_validation->set_rules('zip_code', lang('zipcode'), 'trim|required|numeric');

		// $this->form_validation->set_rules('state', lang('state'), 'trim|required');
		// $this->form_validation->set_rules('country', lang('country'), 'trim|required');
		// $this->form_validation->set_rules('facebook', lang('facebook'), 'trim|required');

		// $this->form_validation->set_rules('twitter', lang('twitter'), 'trim|required');

		$validate_form = $this->form_validation->run();
		return $validate_form;



	}

	function activity_log()
	{   
		$user_id=log_user_id();
		$data['title'] = lang('activity_log'); 
		if($this->input->post("view_user_tree")){
			$post_array = $this->input->post();
			$user_id=$post_array['user_id'];
			$user_name = $this->Base_model->getUserName($post_array['user_id']);
		}
		$data['activity_log'] = $this->Member_model->getActivityHistory($user_id);

		$this->loadView($data);
	}

	function validate_update_security_pin($user_name) {
		$password_length_min = value_by_key('password_min_len');
		$password_length_max = value_by_key('password_max_len');

		$this->form_validation->set_rules('new_pin', lang('new_pin'), 'required|min_length[8]|max_length[8]|differs[old_pin]');
		$this->form_validation->set_rules('confirm_pin', lang('confirm_pin'), 'required|min_length[8]|max_length[8]|matches[new_pin]');
		$result =  $this->form_validation->run();
		return $result;
	}

	function get_item_details() {
		if ($this->input->post()) {
			$post_arr = $this->input->post();
			$response['status'] = $this->Member_model->getallstatus($post_arr);
			if($response['status']==1){
				$response['success'] = TRUE;
				$this->output
				->set_status_header(200)
				->set_content_type('application/json', 'utf-8')
				->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
				->_display();
				exit();

			}else{

				$response['success'] = FALSE;

				$this->output->set_status_header(200)
				->set_content_type('application/json', 'utf-8')
				->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
				->_display();
				exit();
			} 
		}
	}
	public function kyc($action="",$id="")
	{
		$data['title']="Kyc Approval";
		$post_arr=[];
		if ($this->input->post('submit') == 'search')
		{
			$post_arr = $this->input->post();
		}
		$data['post_arr']=$post_arr;
		if($action=='delete')
		{
			$single = $this->Member_model->getKycDetails($id);
			// print_r($single);die();
			$user = $single['user_id'];
			$deleted_data=$this->Member_model->getPendingKycDetails($id,'deleted');
			if($deleted_data)
			{
				$this->Member_model->commit();
				$msg = 'Deleted successfully..!!';
				$this->Base_model->insertIntoActivityHistory($user, $user, 'kyc_rejected');
				$this->redirect("<b>$msg </b>", "member/kyc", TRUE);
			}
			else
			{
				$this->Member_model->rollback();
				$this->redirect('Error on deletion', "member/kyc", FALSE);
			}
		}
		if($action == "approve")
		{

			$single = $this->Member_model->getKycDetails($id);
			$user = $single['user_id'];
			$single['kyc_id'] = $single['id'];
			$result=$this->Member_model->UpdateKycDetailsUserInfo($single['user_id'],$single);
			// print_r($result);die();
			$approve_data=$this->Member_model->getPendingKycDetails($id,'approved');
			$this->Member_model->updateKycStatusUserinfo($user);
			if($approve_data)
			{
				$this->Member_model->commit();
				$msg = 'Approved successfully..!!';
				$this->redirect("<b>$msg </b>", "member/kyc", TRUE);
			}
			else
			{
				$this->Member_model->rollback();
				$this->redirect('Error on approve request..!!', "member/kyc", FALSE);
			}
		}
		$this->loadView($data);
	}
	public function get_kyc_ajax() {
		if ($this->input->is_ajax_request()) {
			$draw = $this->input->post('draw');
			$post_arr = $this->input->post();
			$count_without_filter = $this->Member_model->getKycCount();

			$count_with_filter = $this->Member_model->getKYCDetailsAjax($post_arr, 1);
			$details = $this->Member_model->getKYCDetailsAjax( $post_arr,'');
			// print_r($details);die();

			$response = array(
				"draw" => intval($draw),
				"iTotalRecords" => $count_without_filter,
				"iTotalDisplayRecords" => $count_with_filter,
				"aaData" => $details,
			);

			echo json_encode($response);
		} 
	}
}
