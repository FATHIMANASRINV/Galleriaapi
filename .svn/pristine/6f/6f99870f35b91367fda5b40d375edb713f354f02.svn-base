<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Tools extends Base_Controller {

	function __construct()
	{
		parent::__construct(); 	
	}


	function news_management($news_id="")
	{   

		if($news_id)
		{
			$deletenews = $this->Tools_model->deletetools($news_id,'news');
			if($deletenews)
			{
				$this->redirect(lang('news_deleted_successfully'), 'tools/news-management', TRUE);
			}
			else
			{
				$this->redirect(lang('error_deleting_news'), 'tools/news-management', FALSE);
			}


			$data['news_id'] =$news_id;  
		}
		$data['title'] = lang('text_news_management');  
		$data['sub_title'] = lang('text_news_management');  

		$news_details = $this->Tools_model->getToolsDetails('','news');



		$data['news_details'] =$news_details;  
		$this->loadView($data);
	}

	function validate_news_management() 
	{
		$this->form_validation->set_rules('title', lang('text_news_title'), 'trim|required');
		$this->form_validation->set_rules('content', lang('text_news_description'), 'trim|required');

		$result =  $this->form_validation->run();
		return $result;
	}

	function delete_new() 
	{

		$result = 0;
		$id = $this->input->post('id');
		if($id)
		{
			$result = $this->Tools_model->deletetools($id,'news');
		}
		echo $result;
	}

	function event_management($event_id = "")
	{   

		if($event_id)
		{

			$event_deleted = $this->Tools_model->deletetools($event_id,'events');
			if($event_deleted)
			{
				$this->redirect(lang('text_user_event_deleted_successfully'), 'tools/event-management', TRUE);
			}else{
				$this->redirect(lang('text_error_on_user_event_deletion'), 'tools/event-management', FALSE);
			}
		}

		$appointments = $this->Tools_model->getToolsDetails('','events');

		$data['appointments'] =$appointments; 


		$data['title'] = lang('text_event_management'); 
		$data['event_id'] =$event_id; 


		$this->loadView($data);
	}

	function validate_event_management() {
		$this->form_validation->set_rules('title', lang('text_subject'), 'trim|required|strip_tags');
		$this->form_validation->set_rules('content', lang('text_description'), 'trim|required');
		$this->form_validation->set_rules('address', lang('address'), 'trim|required');
		$this->form_validation->set_rules('location', lang('location'), 'trim|required');
		$this->form_validation->set_rules('start_date', lang('from_date'), 'trim|required|strip_tags');
		$this->form_validation->set_rules('end_date', lang('end_date'), 'trim|required|strip_tags');
		$validate_form = $this->form_validation->run();
		return $validate_form;
	}
	function view_efiles()
	{  
		$efile_details = $this->Tools_model->getToolsDetails('','efiles');	
		$data['efile_details']=$efile_details;
		$data['title']=lang('text_efiles');

		$this->loadView($data);
	}
	function validate_upload_efiles() 
	{
		$this->form_validation->set_rules('title', lang('text_efile_title'), 'trim|required');
		$this->form_validation->set_rules('content', lang('text_efile_description'), 'trim|required');


		$result =  $this->form_validation->run();
		return $result;
	}

	function delete_efiles() 
	{

		$result = 0;
		$efile_id = $this->input->post('efile_id');
		if($efile_id)
		{
			$result = $this->Tools_model->deletetools($efile_id,'efiles');
		}
		echo $result;
	}

	function add_news($news_id="")
	{   
		if ($this->input->post('submit') && $this->validate_news_management()) {
			$post_arr = $this->input->post();


			$post_arr['userfile'] = $this->Tools_model->getImageName($post_arr['image']);
			$result = $this->Tools_model->insertTools($post_arr,'news');

			if ($result) {                
				$msg = lang('text_news_updated_successfully');
				$this->redirect($msg, 'tools/news_management', TRUE);
			} else {
				$msg = lang('text_error_on_news_updation');
				$this->redirect($msg, 'tools/news_management', FALSE);
			}
		}
		elseif ($this->input->post('update') && $this->validate_news_management()) {
			$post_arr = $this->input->post(); 

			// if(empty($post_arr['image']) )
			// {
			// 	$msg = lang('please_select_attachment');
			// 	$this->redirect($msg, 'tools/add_news/'.$news_id.'', FALSE);  
			// }
			// else{

			$post_arr['userfile'] = $this->Tools_model->getImageName($post_arr['image']);
			// }

			$result = $this->Tools_model->UpdateTools($post_arr,'news');

			if ($result) {                
				$msg = lang('text_news_updated_successfully');
				$this->redirect($msg, 'tools/news_management', TRUE);
			} else {
				$msg = lang('text_error_on_news_updation');
				$this->redirect($msg, 'tools/news_management', FALSE);
			}
		}
		if($news_id)
		{
			$news_id_details = $this->Tools_model->getToolsDetails($news_id,'news');


			$data['news_id_details'] =$news_id_details;  
			$data['news_id'] =$news_id;
			$data['title'] = lang('text_edit_news');  
			$data['sub_title'] = lang('text_edit_news');  

		}
		else
		{
			$data['title'] = lang('text_add_news');  
			$data['sub_title'] = lang('text_add_news');
		}  

		$news_details = $this->Tools_model->getToolsDetails('','news');

		$data['news_details'] =$news_details;  
		$this->loadView($data);
	}

	public function add_event($event_id='')
	{

		$individual_events = array();
		if($event_id)
		{
			$individual_events = $this->Tools_model->getToolsDetails($event_id,'events');

		}

		if($this->input->post('submit') && $this->validate_event_management())
		{
			$post_arr = $this->input->post(); 
			// print_r($post_arr);die();
			// if(empty($post_arr['image']))
			// {
			// 	$msg = lang('please_select_attachment');
			// 	$this->redirect($msg, 'tools/add_event', FALSE);  
			// }
			// else{

			$post_arr['userfile'] = $this->Tools_model->getImageName($post_arr['image']);
			// }


			$event_inserted = $this->Tools_model->insertTools($post_arr,'events');

			if($event_inserted)
			{
				$this->redirect(lang('text_user_event_inserted_successfully'), 'tools/event-management', TRUE);
			}else{
				$this->redirect(lang('text_error_on_user_event_insertion'), 'tools/event-management', FALSE);
			}
		}

		if($this->input->post('update') && $this->validate_event_management())
		{
			$post_arr = $this->input->post(); 
			
			// if(empty($post_arr['image']))
			// {
			// 	$msg = lang('please_select_attachment');
			// 	$this->redirect($msg, 'tools/add_event/'.$event_id.'', FALSE);  
			// }
			// else{

			$post_arr['userfile'] = $this->Tools_model->getImageName($post_arr['image']);
			// }


			$post_arr['id']=$event_id;


			$event_updated = $this->Tools_model->UpdateTools($post_arr,'events');

			if($event_updated)
			{
				$this->redirect(lang('text_user_event_updated_successfully'), 'tools/event-management', TRUE);
			}else{
				$this->redirect(lang('text_error_on_user_event_updaion'), 'tools/event-management', FALSE);
			}
		}
		$data['title'] = lang('text_event_management'); 
		$data['event_id'] =$event_id; 
		$data['individual_events'] = $individual_events; 

		$this->loadView($data);


	}
	function upload_efiles()
	{   
		if ($this->input->post('efile_upload') && $this->validate_upload_efiles()) {
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_demo_mode');

				$this->redirect( $msg, "tools/upload_efiles", FALSE);

			}
			$upload_efiles= $this->input->post(); 
			


			if(empty($upload_efiles['image']))
			{
				$msg = lang('please_select_attachment');
				$this->redirect($msg, 'tools/upload_efiles/', FALSE);  
			}
			else{

				$upload_efiles['userfile'] = $this->Tools_model->getImageName($upload_efiles['image']);
			}

			$result = $this->Tools_model->insertTools($upload_efiles ,'efiles');

			if ($result) {                
				$msg = lang('text_efile_uploaded_successfully');
				$this->redirect($msg, 'tools/view_efiles', TRUE);
			} else {
				$msg = lang('text_error_on_upload_efile');
				$this->redirect($msg, 'tools/view_efiles', FALSE);
			}
		}		
		$data['title']=lang('text_upload_efiles');
		$this->loadView($data);
	}

	function add_images()
	{ 

		if ($this->input->post('add_image') && $this->validate_add_images()) {
			$this->load->config('ssl');
			$demo_mode=$this->config->item('demo_mode');
			if($demo_mode)
			{
				$msg=lang('site_under_maintenance');

				$this->redirect( $msg, "tools/add_images", FALSE);

			}
			$add_image= $this->input->post();

			$file_name = NULL;
			if($_FILES['userfile']['error']!=4)
			{                
				$upload_path = './assets/images/'.$add_image['type'];
				$config['upload_path'] = './assets/images/'.$add_image['type'];
				$config['allowed_types'] = 'gif|jpg|png|jpeg';
				$config['max_size'] = '2000000';
				$config['remove_spaces'] = true;
				$config['overwrite'] = false;
				$config['encrypt_name'] = true; 


				$this->load->library('upload', $config);
				$msg = '';
				if (!$this->upload->do_upload()) {

					$msg = lang('text_image_not_selected');
					$error = array('error' => $this->upload->display_errors());
					$msg = lang('text_error_on_adding_image');
					$this->redirect($msg, 'tools/add_images', FALSE);
				} else { 


					$image_arr = array('upload_data' => $this->upload->data());
					$new_file_name = $image_arr['upload_data']['file_name'];
					$image = $image_arr['upload_data'];
					$file_name = $image['file_name'];
				}
			}
			if($file_name == "")
			{
				$msg = lang('text_image_not_selected');
				$this->redirect($msg, 'tools/add_images', FALSE);
			}


			$add_image['userfile']=$file_name;


			$img = array(
				'orig_name' => $image_arr['upload_data']['orig_name'],
				'file_name' => $image_arr['upload_data']['file_name'],
				'file_size' => $image_arr['upload_data']['file_size'],
				'image_type' => $image_arr['upload_data']['image_type'],
				'sort_order' => $add_image['sort_order'],

			);  

			$result = $this->Tools_model->insertImages($img,$add_image['type']);

			if ($result) {                
				$msg = lang('image_added_successfully');
				$this->redirect($msg, 'tools/add_images', TRUE);
			} else {
				$msg = lang('text_error_on_adding_image');
				$this->redirect($msg, 'tools/add_images', FALSE);
			}
		}		

		$data['details']=$this->Tools_model->getAddedImages();
		$data['title']=lang('add_image');
		$this->loadView($data);
	}
	function validate_add_images() 
	{
		$this->form_validation->set_rules('sort_order', lang('text_sort_order'), 'trim|required|numeric');
		$this->form_validation->set_rules('type', lang('type'),'trim|required');


		$result =  $this->form_validation->run();
		return $result;
	}

	public function get_image_gallery_ajax($type) {


		$data = array();
		if($this->input->get('target')) {
			$data['target'] = $this->input->get('target');
		}
		if($this->input->get('target')) {
			$data['thumb'] = $this->input->get('thumb');
		}
		if($this->input->get('filter_name')) {
			$data['filter_name'] = $this->input->get('filter_name');
		}
		$page = 0;
		if($this->input->get('per_page')) {
			$page = $this->input->get('per_page');
		}

		$data['p_id']=0;
		if($this->input->get('p_id')) {
			$data['p_id'] = $this->input->get('p_id');
		}


		$data['refresh'] = base_url().'admin/tools/get_image_gallery_ajax/'.$type.'?&target='.$data['target'].'&thumb='.$data['thumb'].'&p_id='.$data['p_id'];


		$config = $this->pagination_config();

		$total_rows = $this->Tools_model->getImages('', 1,$type);
		$query = [];
		$query['filter_name'] = (isset($data['filter_name'])?$data['filter_name']:'');
		$query['page'] = $page; 
		$query['limit'] = 12;
		$query['product_id'] = $data['p_id'];

		$images = $this->Tools_model->getImages($query,0,$type);

		$config["total_rows"] = $total_rows;
		$config["page"] = $config['page_query_string'];
		$config["per_page"] = 12;

		$config["url"] = base_url().'admin/tools/get_image_gallery_ajax/'.$type.'?&target='.$data['target'].'&thumb='.$data['thumb'].'&p_id='.$data['p_id'];



		$this->pagination->initialize($config);
		$data['pagination'] =  $this->pagination->create_links();

		$file_path = './assets/images/'.$type;
		$file_path_base_url = assets_url().'images/'.$type;

		foreach ($images as $row) {
			$data['images'][] = array(
				'id'    => $row['id'],
				'thumb' => $file_path_base_url.'/'.$row['file_name'],
				'name'  => $row['file_name'],
				'type'  => 'image',
				'path'  => $file_path.'/'.$row['file_name'],
				'href'  => $file_path_base_url.'/'.$row['file_name']
			);
		}

		if($type=='efile_images')
		{
			$this->output->set_output($this->smarty->view('admin/tools/efile_gallery.tpl', $data, TRUE))->_display();
		}
		elseif($type=='news_images')
		{
			$this->output->set_output($this->smarty->view('admin/tools/news_gallery.tpl', $data, TRUE))->_display();
		}
		elseif($type=='event_images')
		{
			$this->output->set_output($this->smarty->view('admin/tools/event_gallery.tpl', $data, TRUE))->_display();
		}


		exit();
	}



	public function upload_image_gallery_ajax($type) {

		if ($this->input->is_ajax_request()) { 

			if(!empty($_FILES['file']))
			{
				$product_id = 0;
				if($this->input->post('p_id')) {
					$product_id = $this->input->post('p_id');
				}

				$date=date('m/Y');
				$date = str_replace( '/', '', $date);
				$upload_path = './assets/images/'.$type;
				$upload_path_base_url = assets_url().'images/'.$type;

				$config['upload_path'] = $upload_path.'/'; 
				$config['allowed_types'] = 'png|jpg|jpeg|gif|pdf';
				$config['remove_spaces']=TRUE;
				$config['max_filename'] = 30;
				$config['encrypt_name'] = true; 

				$this->load->library('upload', $config);


				if (!empty($_FILES['file']['name']) && is_array($_FILES['file']['name'])) {
					foreach (array_keys($_FILES['file']['name']) as $key) {


						$_FILES['files']['name']     = $_FILES['file']['name'][$key];
						$_FILES['files']['type']     = $_FILES['file']['type'][$key];
						$_FILES['files']['tmp_name'] = $_FILES['file']['tmp_name'][$key];
						$_FILES['files']['error']    = $_FILES['file']['error'][$key];
						$_FILES['files']['size']     = $_FILES['file']['size'][$key];

						if($this->upload->do_upload('files')){

							$uploaded = $this->upload->data();


							$data = array(
								'orig_name' => $uploaded['orig_name'],
								'file_name' => $uploaded['file_name'],
								'file_size' => $uploaded['file_size'],
								'image_type' => $uploaded['image_type'],
								'sort_order' => 0,

							);  
							$media_id = $this->Tools_model->insertImages($data,$type); 

							if($media_id){

								$res['success'] = lang('image_uploaded_successfully');

							} else {
								$res['error'] = lang('image_uploaded_successfully_but_notsaved');
							}
						} else {

							$res['error'] = $this->upload->display_errors();
						}

					}
				}


			} else {
				$res['error'] = lang('Image_not_found');
			}

			$this->output->set_output(json_encode($res));
		}
	}

	public function delete_image_gallery_ajax($type) {

		if($this->input->is_ajax_request()) {

			$post = $this->input->post();

			$res = $this->Tools_model->deleteGalleryImages($post['path'],$type);

			$json['success'] = lang('images_deleted_success');
			$this->output
			->set_status_header(200)
			->set_content_type('application/json', 'utf-8')
			->set_output(json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
			->_display();
			exit();	
		}
	}

	function pagination_config($class="pagination start-links"){

		$this->load->library("pagination");

		$config['full_tag_open'] = "<ul class='".$class."'>";
		$config['full_tag_close'] = '</ul>';

		$config['first_link'] = TRUE;
		$config['first_tag_open'] = '<li class="page-item first">';
		$config['first_tag_close'] = '</li>';

		$config['prev_link'] = 'Prev';
		$config['prev_tag_open'] = '<li class="page-item prev">';
		$config['prev_tag_close'] = '</li>';

		$config['next_link'] = 'Next';
		$config['next_tag_open'] = '<li class="page-item next">';
		$config['next_tag_close'] = '</li>';

		$config['last_link'] = FALSE;
		$config['last_tag_open'] = '<li class="page-item last"><a href="#" class="page-link">';
		$config['last_tag_close'] = '</li>';

		$config['cur_tag_open'] = '<li class="page-item active"><a href="#" class="page-link">';
		$config['cur_tag_close'] = '</a></li>';

		$config['num_tag_open'] = '<li class="page-item">';
		$config['num_tag_close'] = '</li>';

		$config["base_url"] = current_full_url('per_page');
		$config["per_page"] = 10;
		$config["uri_segment"] = 10;
		$config["page_query_string"] = TRUE;
		$config['num_links'] = 10;
		$this->data['page'] = $config['page'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

		return $config;
	}


	function generateBackUp(){

		$result = $this->Tools_model->createDbBackup();
		if ($result['status']) {   

			$html= ' <div class="modal-dialog">
			<div class="modal-content">
			<div class="modal-header">
			<button type="button" class="close" data-dismiss="modal" aria-label="Close">
			<span aria-hidden="true">&times;</span></button>
			<h4 class="modal-title">Backup is finished</h4>
			</div>
			<div class="modal-body text-center"> 
			<a href="'. base_url().$result['file_name'] .'" download class="btn btn-default "> <i class="fa fa-download"></i> Download the file</a>
			</div>  
			<div class="modal-footer">
			<button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Close</button> 
			</div>
			</div>
			<!-- /.modal-content -->
			</div>';

			$this->output->set_output($html);
		} else { 
			die("FAILED");
		}
	}
	function delete_images($id='') 
	{
		

		if($id)
		{

			$result = $this->Tools_model->deleteImages($id);
			if($result){

				$msg = lang('images_deleted_success');
				$this->redirect($msg, "tools/add_images", TRUE);

			}
			else{
				$msg =lang('error_on_deletion');
				$this->redirect($msg, "tools/add_images", FALSE);
			}

		}
		
	}




}
