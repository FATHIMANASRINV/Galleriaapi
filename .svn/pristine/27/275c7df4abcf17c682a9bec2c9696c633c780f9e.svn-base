<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require_once ("Api_Controller.php"); 

class Auth extends Api_Controller
{
    public function __construct()
    {
        parent::__construct();
        // $this->load->model('Login_model');
    }

    public function login()
    {   
        $dataPost = $this->input->post();
        if($this->validate_login()){
            $this->load->model('Login_model');
            $user = $this->Login_model->apiLogin($dataPost['wallet']); 
            if ( !empty($user) ) {
                $tokenData = array();
                $tokenData['user_id'] = $user['user_id'];
                unset($user['user_id']); 
                unset($user['password']); 
                if($user['user_photo'])
                {
                    $user['user_photo'] = $user['user_photo'] == 'nophoto.png' ? null : assets_url('images/profile/') . $user['user_photo'];
                }
                else
                {
                    $user['user_photo']=null;
                }
                $response['success'] = TRUE;
                $response['msg'] = lang('login_success'); 
                $user['token'] = Authorization::generateToken($tokenData);
                $response['data'] = $user;
                $this->output
                ->set_status_header(200)
                ->set_content_type('application/json', 'utf-8')
                ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
                ->_display();
                exit(); 
            }
            $response['success'] = false;
            $response['msg'] ='Invalid Wallet';
            $response['error_msgs'] = ['Invalid Credentials'=>'Invalid Wallet'];
            $this->output
            ->set_status_header(200)
            ->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
            ->_display();
            exit(); 
        }elseif($error_array = $this->form_validation->error_array()){ 
            $response['success']= false;
            $response['msg'] = join(", ",$error_array);
            $response['error_msgs'] = $error_array;
            $this->output
            ->set_status_header(200)
            ->set_content_type('application/json', 'utf-8')
            ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
            ->_display();
            exit(); 
        }
        $response['success'] = false; 
        $response['msg'] = 'Unauthorized';
        $this->output
        ->set_status_header(200)
        ->set_content_type('application/json', 'utf-8')
        ->set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))
        ->_display();
        exit();
    }
    function validate_login() 
    {
        $this->form_validation->set_rules('wallet',  'Wallet' , 'trim|required');
        $this->form_validation->set_rules('dateTime', 'dateTime' , 'trim|required|callback_datetime_check');
        $this->form_validation->set_rules('auth', 'Auth' , 'trim|required|callback_Auth_Check');
        $val_res = $this->form_validation->run();
        return $val_res;
    }
    public function datetime_check($input)
    {
        $input_time = strtotime($input);
        $current_time = strtotime(date('Y-m-d H:i:00')); 
        $min_time = $current_time - 60;
        if ($input_time < $min_time || $input_time > $current_time) {
            $this->form_validation->set_message('datetime_check', 'The DateTime must be within 1 minute before or equal to the current time.');
            return false;
        }
        return true;
    }
    public function Auth_Check($input)
    {
        $wallet = strtotime($this->input->post('wallet'));
        $dateTime = strtotime($this->input->post('dateTime'));
        $string=md5($wallet.':'.$dateTime);
        if($string!=$input)
        {
            $this->form_validation->set_message('Auth_Check', 'Authentication failed');
            return false;
        }
        return true;
    }
}
