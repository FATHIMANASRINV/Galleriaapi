<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Calculation_model extends Base_model {

    function __construct() {
        parent::__construct();

    } 

    public function insertCommissionDetails($data, $table,$wallet) {
        $data['amount_payable'] = $data['total_amount'];
        if ($data['amount_payable']) {
            $result =  $this->db->insert( $table, $data);
            if($result )
            {
                // $wallet = $this->Base_model->getAmountTypeName($amount_type_id);
                if(element('missed_income_status',$data)!=1 && $wallet!='global_bonus_pending')
                {
                //  $this->load->library('Createwalletbep20');
                //  $destination = $this->Base_model->getUserInfoField('wallet_address',$data['user_id']);
                //  $user_wallet = ;
                //  $user_private_key = '';
                //  if($user_wallet && $user_private_key && $destination)
                //  {
                //      $balance = 0;
                //      $payable_coin = $data['total_amount'];
                //      $payable_coin = strval($payable_coin);
                //      $response=$this->createwalletbep20->sendTransactionBep20($user_wallet,$destination,$user_private_key,$payable_coin);
                //      if(element('txId',$response))
                //      {
                //         $value['transaction']=$response['txId'];
                //         $value['response']=$response;
                //         $this->begin();
                //         $result = $this->updateUSDTTransactionAdminDetails($data['user_id'], $value, 'finished','pending');
                //         $result = $this->insertUSDTPaymentHistory($data['user_id'],$payable_coin, 'admin',$value['transaction']);
                //         if( !$result)
                //         {
                //             $this->rollback();
                //             return FALSE;
                //         }
                //         $this->commit();
                //     }
                // }
                $this->Base_model->addUserWalletAmount( $data['user_id'], $data['amount_payable'], $wallet );
            }
            }
            $this->db->cache_delete('admin', 'business');
            $this->db->cache_delete('user', 'business');
            $this->db->cache_delete('admin', 'dashboard');
            $this->db->cache_delete('user', 'dashboard');
            $this->db->cache_delete('admin', 'report');
            $this->db->cache_delete('user', 'report');
            return $result;
        }

        return TRUE;
    }


    public function insertLevelBonus($upline_id, $level_bonus, $from_user_id,$date) {
       $this->db->cache_delete();
       $result = TRUE;
       $this->load->model('Settings_model');
       if ($upline_id != "") {
        $level_info = $this->Settings_model->getlevelDetails();
        $uplines = $this->getUplineUsersUnilevel($upline_id, count($level_info), true);
        if($level_info){
            foreach ($uplines as $level => $users) {
                $referal_count=$this->Base_model->getUserInfoField('referral_count',$users['user_id']);
                $level_details = $level_info[$level+1];
                $level_percentage =$level_details['level_commission'];
                if($level_percentage > 0) {
                    $amount = $level_bonus * $level_percentage / 100;
                    if ($referal_count <= 0 && $level_details['level_no'] >= 2){
                        $missed_income=$this->Base_model->addUserSpeicficWalletAmount($users['user_id'],$amount,'missed_level_income');
                        $comm = [
                            'user_id' => $users['user_id'],
                            'total_amount' => $amount,
                            'date_of_submission' => $date,
                            'from_id' => $from_user_id,
                            'fund_transfer_type' => 'credit',
                            'payout_ref_id' => $level_percentage,
                            'transaction_note' => 'Level'.$level_details['level_no'],
                            'missed_income_status' => 1,
                        ];
                        $result = $this->Calculation_model->insertCommissionDetails( $comm,'level_bonus','level_bonus');
                        continue; 
                    }
                    $comm = [
                        'user_id' => $users['user_id'],
                        'total_amount' => $amount,
                            // 'amount_type_id' => $amount_type_level,
                        'date_of_submission' => $date,
                        'from_id' => $from_user_id,
                        'fund_transfer_type' => 'credit',
                        'payout_ref_id' => $level_percentage,
                        'transaction_note' => 'Level'.$level_details['level_no'],
                        'missed_income_status' => 0,
                    ];
                    $result = $this->Calculation_model->insertCommissionDetails( $comm,'level_bonus','level_bonus');
                }

            }
        }
    }
    return $result;
}
public function InsertGlobalCommunityBonus($global_bonus,$package,$user_id) {

   $this->db->cache_delete();
   $result = TRUE;
   $uplines = $this->Base_model->getMonolinesUsers($user_id);
   foreach ($uplines as $level => $users) {
    if($users['package_id'] >= $package){
     $comm = [
        'user_id' => $users['user_id'],
        'total_amount' => $global_bonus,
        'date_of_submission' => date('Y-m-d H:i:s'),
        'from_id' => $user_id,
        'fund_transfer_type' => 'credit',
        'payout_ref_id' => $package,
        'status' => 'Released',
    ];
    $result = $this->Calculation_model->insertCommissionDetails( $comm,'global_bonus','global_bonus');
}else{
 $comm = [
    'user_id' => $users['user_id'],
    'total_amount' => $global_bonus,
    'date_of_submission' => date('Y-m-d H:i:s'),
    'from_id' => $user_id,
    'fund_transfer_type' => 'credit',
    'payout_ref_id' => $package,
    'status' => 'Pending',
];
$result = $this->Calculation_model->insertCommissionDetails( $comm,'global_bonus','global_bonus_pending');
}
}
$check_pending=$this->CheckPendingGlobalCommunityBonus($global_bonus,$package,$user_id);
return $result;
}
public function CheckPendingGlobalCommunityBonus($global_bonus,$package,$user_id) {
    $this->db->select('id,total_amount');
    $this->db->from('global_bonus');
    $this->db->where('payout_ref_id', $package);
    $this->db->where('user_id', $user_id);
    $this->db->where('status', 'Pending');
    $res = $this->db->get();
    foreach ($res->result_array() as $row) {
        $add=$this->addUserSpeicficWalletAmount($user_id,$row['total_amount'],'global_bonus');
        $update=$this->UpdateStatus($row['id'],$user_id,'Released');
    }
    return True;
}
public function UpdateStatus($id,$user_id,$status){
    $this->db->set('status', $status);
    $this->db->where('user_id', $user_id);
    $this->db->where('id', $id);
    $result =  $this->db->update('global_bonus');
    return $result;
}

public function getUplineUsersUnilevel($user_id, $level = 15, $child=false) {
    $i = 0;
    $admin_id = 16;
    $uplines = array();
    if($child) {
        $info = [
            'user_id' => $user_id,
            'status' => 1,
        ];
        $uplines[$i] = $info;
        $i++;
    }       
    if($user_id != $admin_id){
        while ($user_id != 0 && $user_id != "" && $i < $level) {

            $user_arr = [];
            $this->db->select('sponsor_id as user_id, status')
            ->from('user_info')
            ->where('user_id', $user_id)
            ->limit(1);
            $query = $this->db->get();
            $user_id = 0;
            foreach ($query->result_array() as $row) {
                if($row['user_id']){
                    $user_arr = $row; 
                    $uplines[$i] = $row; 
                    $user_id = $row['user_id'];
                }
            }
            $i++;
        }
    }
    return $uplines;
}

public function getLevelPercentage($level) {

    $this->db->select('level_commission');
    $this->db->from('level_commission');
    $this->db->where('id', $level);
    $res = $this->db->get();

    if($res->row()) {
        return $res->row()->level_commission;
    }

    return 0;
}
public function getBscWalletAddress($user_id)
{
    $details=[];
    $this->db->select('*');
    $this->db->from('bep_crypto_wallet_details');
    $this->db->where('user_id', $user_id);
    $this->db->limit(1);
    $query = $this->db->get();
    foreach ($query->result_array() as $row) {  
        $row['address'] = $this->encrypt_decrypt('decrypt',$row['address']);
        $row['private_key'] = $this->encrypt_decrypt('decrypt',$row['private_key']);
        $details = $row;
    }
    return $details;
}
public function insertUSDTPaymentHistory($user_id, $amount, $type,$transaction_id)
{ 
    $date = date('Y-m-d H:i:s');
    $result = false; 
    $this->db->set('user_id', $user_id);
    $this->db->set('amount', $amount);
    $this->db->set('type ', $type);
    $this->db->set('transaction_id ', $transaction_id);
    $this->db->set('date ', $date);
    $result = $this->db->insert('bep_balance_sheet');

    return $result;
}
}